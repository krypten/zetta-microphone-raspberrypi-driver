/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['argo.js']) {
  _$jscoverage['argo.js'] = [];
  _$jscoverage['argo.js'][1] = 0;
  _$jscoverage['argo.js'][2] = 0;
  _$jscoverage['argo.js'][3] = 0;
  _$jscoverage['argo.js'][4] = 0;
  _$jscoverage['argo.js'][5] = 0;
  _$jscoverage['argo.js'][6] = 0;
  _$jscoverage['argo.js'][7] = 0;
  _$jscoverage['argo.js'][8] = 0;
  _$jscoverage['argo.js'][9] = 0;
  _$jscoverage['argo.js'][10] = 0;
  _$jscoverage['argo.js'][14] = 0;
  _$jscoverage['argo.js'][15] = 0;
  _$jscoverage['argo.js'][17] = 0;
  _$jscoverage['argo.js'][18] = 0;
  _$jscoverage['argo.js'][19] = 0;
  _$jscoverage['argo.js'][20] = 0;
  _$jscoverage['argo.js'][22] = 0;
  _$jscoverage['argo.js'][23] = 0;
  _$jscoverage['argo.js'][25] = 0;
  _$jscoverage['argo.js'][27] = 0;
  _$jscoverage['argo.js'][28] = 0;
  _$jscoverage['argo.js'][30] = 0;
  _$jscoverage['argo.js'][31] = 0;
  _$jscoverage['argo.js'][33] = 0;
  _$jscoverage['argo.js'][34] = 0;
  _$jscoverage['argo.js'][35] = 0;
  _$jscoverage['argo.js'][37] = 0;
  _$jscoverage['argo.js'][40] = 0;
  _$jscoverage['argo.js'][41] = 0;
  _$jscoverage['argo.js'][42] = 0;
  _$jscoverage['argo.js'][45] = 0;
  _$jscoverage['argo.js'][46] = 0;
  _$jscoverage['argo.js'][47] = 0;
  _$jscoverage['argo.js'][48] = 0;
  _$jscoverage['argo.js'][50] = 0;
  _$jscoverage['argo.js'][54] = 0;
  _$jscoverage['argo.js'][55] = 0;
  _$jscoverage['argo.js'][56] = 0;
  _$jscoverage['argo.js'][57] = 0;
  _$jscoverage['argo.js'][60] = 0;
  _$jscoverage['argo.js'][61] = 0;
  _$jscoverage['argo.js'][64] = 0;
  _$jscoverage['argo.js'][65] = 0;
  _$jscoverage['argo.js'][66] = 0;
  _$jscoverage['argo.js'][67] = 0;
  _$jscoverage['argo.js'][69] = 0;
  _$jscoverage['argo.js'][71] = 0;
  _$jscoverage['argo.js'][72] = 0;
  _$jscoverage['argo.js'][73] = 0;
  _$jscoverage['argo.js'][76] = 0;
  _$jscoverage['argo.js'][77] = 0;
  _$jscoverage['argo.js'][80] = 0;
  _$jscoverage['argo.js'][81] = 0;
  _$jscoverage['argo.js'][82] = 0;
  _$jscoverage['argo.js'][83] = 0;
  _$jscoverage['argo.js'][84] = 0;
  _$jscoverage['argo.js'][85] = 0;
  _$jscoverage['argo.js'][86] = 0;
  _$jscoverage['argo.js'][88] = 0;
  _$jscoverage['argo.js'][89] = 0;
  _$jscoverage['argo.js'][92] = 0;
  _$jscoverage['argo.js'][95] = 0;
  _$jscoverage['argo.js'][96] = 0;
  _$jscoverage['argo.js'][97] = 0;
  _$jscoverage['argo.js'][100] = 0;
  _$jscoverage['argo.js'][101] = 0;
  _$jscoverage['argo.js'][104] = 0;
  _$jscoverage['argo.js'][105] = 0;
  _$jscoverage['argo.js'][110] = 0;
  _$jscoverage['argo.js'][111] = 0;
  _$jscoverage['argo.js'][112] = 0;
  _$jscoverage['argo.js'][113] = 0;
  _$jscoverage['argo.js'][116] = 0;
  _$jscoverage['argo.js'][117] = 0;
  _$jscoverage['argo.js'][119] = 0;
  _$jscoverage['argo.js'][121] = 0;
  _$jscoverage['argo.js'][124] = 0;
  _$jscoverage['argo.js'][125] = 0;
  _$jscoverage['argo.js'][126] = 0;
  _$jscoverage['argo.js'][128] = 0;
  _$jscoverage['argo.js'][129] = 0;
  _$jscoverage['argo.js'][132] = 0;
  _$jscoverage['argo.js'][133] = 0;
  _$jscoverage['argo.js'][134] = 0;
  _$jscoverage['argo.js'][135] = 0;
  _$jscoverage['argo.js'][136] = 0;
  _$jscoverage['argo.js'][141] = 0;
  _$jscoverage['argo.js'][142] = 0;
  _$jscoverage['argo.js'][144] = 0;
  _$jscoverage['argo.js'][145] = 0;
  _$jscoverage['argo.js'][146] = 0;
  _$jscoverage['argo.js'][147] = 0;
  _$jscoverage['argo.js'][148] = 0;
  _$jscoverage['argo.js'][149] = 0;
  _$jscoverage['argo.js'][153] = 0;
  _$jscoverage['argo.js'][156] = 0;
  _$jscoverage['argo.js'][157] = 0;
  _$jscoverage['argo.js'][159] = 0;
  _$jscoverage['argo.js'][160] = 0;
  _$jscoverage['argo.js'][161] = 0;
  _$jscoverage['argo.js'][162] = 0;
  _$jscoverage['argo.js'][163] = 0;
  _$jscoverage['argo.js'][166] = 0;
  _$jscoverage['argo.js'][167] = 0;
  _$jscoverage['argo.js'][168] = 0;
  _$jscoverage['argo.js'][169] = 0;
  _$jscoverage['argo.js'][171] = 0;
  _$jscoverage['argo.js'][172] = 0;
  _$jscoverage['argo.js'][174] = 0;
  _$jscoverage['argo.js'][177] = 0;
  _$jscoverage['argo.js'][179] = 0;
  _$jscoverage['argo.js'][180] = 0;
  _$jscoverage['argo.js'][181] = 0;
  _$jscoverage['argo.js'][182] = 0;
  _$jscoverage['argo.js'][183] = 0;
  _$jscoverage['argo.js'][185] = 0;
  _$jscoverage['argo.js'][190] = 0;
  _$jscoverage['argo.js'][193] = 0;
  _$jscoverage['argo.js'][198] = 0;
  _$jscoverage['argo.js'][199] = 0;
  _$jscoverage['argo.js'][201] = 0;
  _$jscoverage['argo.js'][203] = 0;
  _$jscoverage['argo.js'][206] = 0;
  _$jscoverage['argo.js'][207] = 0;
  _$jscoverage['argo.js'][208] = 0;
  _$jscoverage['argo.js'][209] = 0;
  _$jscoverage['argo.js'][210] = 0;
  _$jscoverage['argo.js'][211] = 0;
  _$jscoverage['argo.js'][212] = 0;
  _$jscoverage['argo.js'][213] = 0;
  _$jscoverage['argo.js'][214] = 0;
  _$jscoverage['argo.js'][215] = 0;
  _$jscoverage['argo.js'][216] = 0;
  _$jscoverage['argo.js'][217] = 0;
  _$jscoverage['argo.js'][218] = 0;
  _$jscoverage['argo.js'][219] = 0;
  _$jscoverage['argo.js'][220] = 0;
  _$jscoverage['argo.js'][221] = 0;
  _$jscoverage['argo.js'][222] = 0;
  _$jscoverage['argo.js'][223] = 0;
  _$jscoverage['argo.js'][225] = 0;
  _$jscoverage['argo.js'][226] = 0;
  _$jscoverage['argo.js'][227] = 0;
  _$jscoverage['argo.js'][230] = 0;
  _$jscoverage['argo.js'][231] = 0;
  _$jscoverage['argo.js'][232] = 0;
  _$jscoverage['argo.js'][233] = 0;
  _$jscoverage['argo.js'][234] = 0;
  _$jscoverage['argo.js'][235] = 0;
  _$jscoverage['argo.js'][236] = 0;
  _$jscoverage['argo.js'][237] = 0;
  _$jscoverage['argo.js'][238] = 0;
  _$jscoverage['argo.js'][241] = 0;
  _$jscoverage['argo.js'][242] = 0;
  _$jscoverage['argo.js'][243] = 0;
  _$jscoverage['argo.js'][249] = 0;
  _$jscoverage['argo.js'][250] = 0;
  _$jscoverage['argo.js'][252] = 0;
  _$jscoverage['argo.js'][253] = 0;
  _$jscoverage['argo.js'][254] = 0;
  _$jscoverage['argo.js'][255] = 0;
  _$jscoverage['argo.js'][258] = 0;
  _$jscoverage['argo.js'][261] = 0;
  _$jscoverage['argo.js'][262] = 0;
  _$jscoverage['argo.js'][263] = 0;
  _$jscoverage['argo.js'][266] = 0;
  _$jscoverage['argo.js'][267] = 0;
  _$jscoverage['argo.js'][268] = 0;
  _$jscoverage['argo.js'][269] = 0;
  _$jscoverage['argo.js'][272] = 0;
  _$jscoverage['argo.js'][277] = 0;
  _$jscoverage['argo.js'][279] = 0;
  _$jscoverage['argo.js'][280] = 0;
  _$jscoverage['argo.js'][281] = 0;
  _$jscoverage['argo.js'][284] = 0;
  _$jscoverage['argo.js'][287] = 0;
  _$jscoverage['argo.js'][288] = 0;
  _$jscoverage['argo.js'][289] = 0;
  _$jscoverage['argo.js'][290] = 0;
  _$jscoverage['argo.js'][293] = 0;
  _$jscoverage['argo.js'][298] = 0;
  _$jscoverage['argo.js'][300] = 0;
  _$jscoverage['argo.js'][301] = 0;
  _$jscoverage['argo.js'][302] = 0;
  _$jscoverage['argo.js'][305] = 0;
  _$jscoverage['argo.js'][308] = 0;
  _$jscoverage['argo.js'][318] = 0;
  _$jscoverage['argo.js'][319] = 0;
  _$jscoverage['argo.js'][320] = 0;
  _$jscoverage['argo.js'][321] = 0;
  _$jscoverage['argo.js'][322] = 0;
  _$jscoverage['argo.js'][324] = 0;
  _$jscoverage['argo.js'][325] = 0;
  _$jscoverage['argo.js'][329] = 0;
  _$jscoverage['argo.js'][330] = 0;
  _$jscoverage['argo.js'][331] = 0;
  _$jscoverage['argo.js'][332] = 0;
  _$jscoverage['argo.js'][335] = 0;
  _$jscoverage['argo.js'][336] = 0;
  _$jscoverage['argo.js'][337] = 0;
  _$jscoverage['argo.js'][338] = 0;
  _$jscoverage['argo.js'][340] = 0;
  _$jscoverage['argo.js'][342] = 0;
  _$jscoverage['argo.js'][344] = 0;
  _$jscoverage['argo.js'][345] = 0;
  _$jscoverage['argo.js'][346] = 0;
  _$jscoverage['argo.js'][348] = 0;
  _$jscoverage['argo.js'][349] = 0;
  _$jscoverage['argo.js'][350] = 0;
  _$jscoverage['argo.js'][351] = 0;
  _$jscoverage['argo.js'][353] = 0;
  _$jscoverage['argo.js'][354] = 0;
  _$jscoverage['argo.js'][355] = 0;
  _$jscoverage['argo.js'][357] = 0;
  _$jscoverage['argo.js'][358] = 0;
  _$jscoverage['argo.js'][361] = 0;
  _$jscoverage['argo.js'][363] = 0;
  _$jscoverage['argo.js'][364] = 0;
  _$jscoverage['argo.js'][368] = 0;
  _$jscoverage['argo.js'][369] = 0;
  _$jscoverage['argo.js'][372] = 0;
  _$jscoverage['argo.js'][373] = 0;
  _$jscoverage['argo.js'][375] = 0;
  _$jscoverage['argo.js'][376] = 0;
  _$jscoverage['argo.js'][378] = 0;
  _$jscoverage['argo.js'][379] = 0;
  _$jscoverage['argo.js'][380] = 0;
  _$jscoverage['argo.js'][381] = 0;
  _$jscoverage['argo.js'][382] = 0;
  _$jscoverage['argo.js'][384] = 0;
  _$jscoverage['argo.js'][387] = 0;
  _$jscoverage['argo.js'][390] = 0;
  _$jscoverage['argo.js'][392] = 0;
  _$jscoverage['argo.js'][395] = 0;
  _$jscoverage['argo.js'][396] = 0;
  _$jscoverage['argo.js'][399] = 0;
  _$jscoverage['argo.js'][400] = 0;
  _$jscoverage['argo.js'][401] = 0;
  _$jscoverage['argo.js'][402] = 0;
  _$jscoverage['argo.js'][403] = 0;
  _$jscoverage['argo.js'][406] = 0;
  _$jscoverage['argo.js'][407] = 0;
  _$jscoverage['argo.js'][408] = 0;
  _$jscoverage['argo.js'][409] = 0;
  _$jscoverage['argo.js'][414] = 0;
  _$jscoverage['argo.js'][415] = 0;
  _$jscoverage['argo.js'][416] = 0;
  _$jscoverage['argo.js'][419] = 0;
  _$jscoverage['argo.js'][420] = 0;
  _$jscoverage['argo.js'][421] = 0;
  _$jscoverage['argo.js'][422] = 0;
  _$jscoverage['argo.js'][423] = 0;
  _$jscoverage['argo.js'][426] = 0;
  _$jscoverage['argo.js'][428] = 0;
  _$jscoverage['argo.js'][429] = 0;
  _$jscoverage['argo.js'][431] = 0;
  _$jscoverage['argo.js'][433] = 0;
  _$jscoverage['argo.js'][434] = 0;
  _$jscoverage['argo.js'][437] = 0;
  _$jscoverage['argo.js'][439] = 0;
  _$jscoverage['argo.js'][440] = 0;
  _$jscoverage['argo.js'][442] = 0;
  _$jscoverage['argo.js'][444] = 0;
  _$jscoverage['argo.js'][445] = 0;
  _$jscoverage['argo.js'][447] = 0;
  _$jscoverage['argo.js'][448] = 0;
  _$jscoverage['argo.js'][451] = 0;
  _$jscoverage['argo.js'][452] = 0;
  _$jscoverage['argo.js'][455] = 0;
  _$jscoverage['argo.js'][457] = 0;
  _$jscoverage['argo.js'][458] = 0;
  _$jscoverage['argo.js'][460] = 0;
  _$jscoverage['argo.js'][461] = 0;
  _$jscoverage['argo.js'][462] = 0;
  _$jscoverage['argo.js'][464] = 0;
  _$jscoverage['argo.js'][465] = 0;
  _$jscoverage['argo.js'][470] = 0;
  _$jscoverage['argo.js'][471] = 0;
  _$jscoverage['argo.js'][472] = 0;
  _$jscoverage['argo.js'][473] = 0;
  _$jscoverage['argo.js'][474] = 0;
  _$jscoverage['argo.js'][477] = 0;
  _$jscoverage['argo.js'][480] = 0;
  _$jscoverage['argo.js'][481] = 0;
  _$jscoverage['argo.js'][484] = 0;
  _$jscoverage['argo.js'][485] = 0;
  _$jscoverage['argo.js'][487] = 0;
  _$jscoverage['argo.js'][488] = 0;
  _$jscoverage['argo.js'][491] = 0;
  _$jscoverage['argo.js'][492] = 0;
  _$jscoverage['argo.js'][495] = 0;
  _$jscoverage['argo.js'][497] = 0;
  _$jscoverage['argo.js'][499] = 0;
  _$jscoverage['argo.js'][500] = 0;
  _$jscoverage['argo.js'][505] = 0;
  _$jscoverage['argo.js'][506] = 0;
  _$jscoverage['argo.js'][507] = 0;
  _$jscoverage['argo.js'][510] = 0;
  _$jscoverage['argo.js'][511] = 0;
  _$jscoverage['argo.js'][512] = 0;
  _$jscoverage['argo.js'][513] = 0;
  _$jscoverage['argo.js'][516] = 0;
  _$jscoverage['argo.js'][518] = 0;
  _$jscoverage['argo.js'][519] = 0;
  _$jscoverage['argo.js'][520] = 0;
  _$jscoverage['argo.js'][522] = 0;
  _$jscoverage['argo.js'][524] = 0;
  _$jscoverage['argo.js'][525] = 0;
  _$jscoverage['argo.js'][526] = 0;
  _$jscoverage['argo.js'][527] = 0;
  _$jscoverage['argo.js'][528] = 0;
  _$jscoverage['argo.js'][529] = 0;
  _$jscoverage['argo.js'][531] = 0;
  _$jscoverage['argo.js'][533] = 0;
  _$jscoverage['argo.js'][535] = 0;
  _$jscoverage['argo.js'][536] = 0;
  _$jscoverage['argo.js'][539] = 0;
  _$jscoverage['argo.js'][541] = 0;
  _$jscoverage['argo.js'][542] = 0;
  _$jscoverage['argo.js'][543] = 0;
  _$jscoverage['argo.js'][544] = 0;
  _$jscoverage['argo.js'][545] = 0;
  _$jscoverage['argo.js'][548] = 0;
  _$jscoverage['argo.js'][550] = 0;
  _$jscoverage['argo.js'][553] = 0;
  _$jscoverage['argo.js'][554] = 0;
  _$jscoverage['argo.js'][558] = 0;
  _$jscoverage['argo.js'][560] = 0;
  _$jscoverage['argo.js'][561] = 0;
  _$jscoverage['argo.js'][562] = 0;
  _$jscoverage['argo.js'][565] = 0;
  _$jscoverage['argo.js'][566] = 0;
  _$jscoverage['argo.js'][567] = 0;
  _$jscoverage['argo.js'][570] = 0;
  _$jscoverage['argo.js'][573] = 0;
  _$jscoverage['argo.js'][577] = 0;
  _$jscoverage['argo.js'][578] = 0;
  _$jscoverage['argo.js'][580] = 0;
}
_$jscoverage['argo.js'][1]++;
var http = require("http");
_$jscoverage['argo.js'][2]++;
var https = require("https");
_$jscoverage['argo.js'][3]++;
var url = require("url");
_$jscoverage['argo.js'][4]++;
var Stream = require("stream");
_$jscoverage['argo.js'][5]++;
var path = require("path");
_$jscoverage['argo.js'][6]++;
var pipeworks = require("pipeworks");
_$jscoverage['argo.js'][7]++;
var environment = require("./environment");
_$jscoverage['argo.js'][8]++;
var Frame = require("./frame");
_$jscoverage['argo.js'][9]++;
var Builder = require("./builder");
_$jscoverage['argo.js'][10]++;
var RegExpRouter = require("./regexp_router");
_$jscoverage['argo.js'][14]++;
var SocketPoolSize = 1024;
_$jscoverage['argo.js'][15]++;
var _httpAgent, _httpsAgent;
_$jscoverage['argo.js'][17]++;
var Argo = (function (_http) {
  _$jscoverage['argo.js'][18]++;
  this.router = RegExpRouter.create();
  _$jscoverage['argo.js'][19]++;
  this.builder = new Builder();
  _$jscoverage['argo.js'][20]++;
  this._http = _http || http;
  _$jscoverage['argo.js'][22]++;
  _httpAgent = new this._http.Agent();
  _$jscoverage['argo.js'][23]++;
  _httpsAgent = new https.Agent();
  _$jscoverage['argo.js'][25]++;
  _httpAgent.maxSockets = _httpsAgent.maxSockets = SocketPoolSize;
  _$jscoverage['argo.js'][27]++;
  var that = this;
  _$jscoverage['argo.js'][28]++;
  var incoming = this._http.IncomingMessage.prototype;
  _$jscoverage['argo.js'][30]++;
  if (! incoming._argoModified) {
    _$jscoverage['argo.js'][31]++;
    var _addHeaderLine = incoming._addHeaderLine;
    _$jscoverage['argo.js'][33]++;
    incoming._addHeaderLine = (function (field, value) {
  _$jscoverage['argo.js'][34]++;
  this._rawHeaderNames = this._rawHeaderNames || {};
  _$jscoverage['argo.js'][35]++;
  this._rawHeaderNames[field.toLowerCase()] = field;
  _$jscoverage['argo.js'][37]++;
  _addHeaderLine.call(this, field, value);
});
    _$jscoverage['argo.js'][40]++;
    incoming.body = null;
    _$jscoverage['argo.js'][41]++;
    incoming.getBody = that._getBody();
    _$jscoverage['argo.js'][42]++;
    incoming._argoModified = true;
  }
  _$jscoverage['argo.js'][45]++;
  var serverResponse = this._http.ServerResponse.prototype;
  _$jscoverage['argo.js'][46]++;
  if (! serverResponse._argoModified) {
    _$jscoverage['argo.js'][47]++;
    serverResponse.body = null;
    _$jscoverage['argo.js'][48]++;
    serverResponse.getBody = that._getBody();
    _$jscoverage['argo.js'][50]++;
    serverResponse._argoModified = true;
  }
});
_$jscoverage['argo.js'][54]++;
Argo.prototype._getBody = (function () {
  _$jscoverage['argo.js'][55]++;
  return (function (callback) {
  _$jscoverage['argo.js'][56]++;
  if (this.body !== null && this.body !== undefined) {
    _$jscoverage['argo.js'][57]++;
    return callback(null, this.body);
  }
  _$jscoverage['argo.js'][60]++;
  if (! this.readable) {
    _$jscoverage['argo.js'][61]++;
    return callback();
  }
  _$jscoverage['argo.js'][64]++;
  var self = this;
  _$jscoverage['argo.js'][65]++;
  this.on("readable", (function () {
  _$jscoverage['argo.js'][66]++;
  var buf = [];
  _$jscoverage['argo.js'][67]++;
  var len = 0;
  _$jscoverage['argo.js'][69]++;
  var chunk;
  _$jscoverage['argo.js'][71]++;
  while ((chunk = self.read()) != null) {
    _$jscoverage['argo.js'][72]++;
    buf.push(chunk);
    _$jscoverage['argo.js'][73]++;
    len += chunk.length;
}
  _$jscoverage['argo.js'][76]++;
  if (! buf.length) {
    _$jscoverage['argo.js'][77]++;
    return;
  }
  _$jscoverage['argo.js'][80]++;
  var body;
  _$jscoverage['argo.js'][81]++;
  if (buf.length && Buffer.isBuffer(buf[0])) {
    _$jscoverage['argo.js'][82]++;
    body = new Buffer(len);
    _$jscoverage['argo.js'][83]++;
    var i = 0;
    _$jscoverage['argo.js'][84]++;
    buf.forEach((function (chunk) {
  _$jscoverage['argo.js'][85]++;
  chunk.copy(body, i, 0, chunk.length);
  _$jscoverage['argo.js'][86]++;
  i += chunk.length;
}));
  }
  else {
    _$jscoverage['argo.js'][88]++;
    if (buf.length) {
      _$jscoverage['argo.js'][89]++;
      body = buf.join("");
    }
  }
  _$jscoverage['argo.js'][92]++;
  self.body = body;
}));
  _$jscoverage['argo.js'][95]++;
  var error = null;
  _$jscoverage['argo.js'][96]++;
  this.on("error", (function (err) {
  _$jscoverage['argo.js'][97]++;
  error = err;
}));
  _$jscoverage['argo.js'][100]++;
  this.on("end", (function () {
  _$jscoverage['argo.js'][101]++;
  callback(error, self.body);
}));
  _$jscoverage['argo.js'][104]++;
  if (typeof this.read === "function") {
    _$jscoverage['argo.js'][105]++;
    this.read(0);
  }
});
});
_$jscoverage['argo.js'][110]++;
Argo.prototype.include = (function (mod) {
  _$jscoverage['argo.js'][111]++;
  var p = mod["package"](this);
  _$jscoverage['argo.js'][112]++;
  p.install();
  _$jscoverage['argo.js'][113]++;
  return this;
});
_$jscoverage['argo.js'][116]++;
Argo.prototype.listen = (function (port) {
  _$jscoverage['argo.js'][117]++;
  var app = this.build();
  _$jscoverage['argo.js'][119]++;
  this._http.createServer(app.run).listen(port);
  _$jscoverage['argo.js'][121]++;
  return this;
});
_$jscoverage['argo.js'][124]++;
Argo.prototype.use = (function (middleware) {
  _$jscoverage['argo.js'][125]++;
  if (middleware["package"]) {
    _$jscoverage['argo.js'][126]++;
    return this.include(middleware);
  }
  _$jscoverage['argo.js'][128]++;
  this.builder.use(middleware);
  _$jscoverage['argo.js'][129]++;
  return this;
});
_$jscoverage['argo.js'][132]++;
Argo.prototype.target = (function (url) {
  _$jscoverage['argo.js'][133]++;
  return this.use((function (handler) {
  _$jscoverage['argo.js'][134]++;
  handler("request", (function (env, next) {
  _$jscoverage['argo.js'][135]++;
  env.target.url = url + (env.request.url || "");
  _$jscoverage['argo.js'][136]++;
  next(env);
}));
}));
});
_$jscoverage['argo.js'][141]++;
Argo.prototype.embed = (function () {
  _$jscoverage['argo.js'][142]++;
  this.buildCore();
  _$jscoverage['argo.js'][144]++;
  this.builder.run(this._target);
  _$jscoverage['argo.js'][145]++;
  this.builder.use((function (handler) {
  _$jscoverage['argo.js'][146]++;
  handler("response", {affinity: "sink"}, (function (env, next) {
  _$jscoverage['argo.js'][147]++;
  if (env.argo.oncomplete) {
    _$jscoverage['argo.js'][148]++;
    env.argo.oncomplete(env);
  }
  _$jscoverage['argo.js'][149]++;
  ;
}));
}));
  _$jscoverage['argo.js'][153]++;
  return this.builder.build();
});
_$jscoverage['argo.js'][156]++;
Argo.prototype.buildCore = (function () {
  _$jscoverage['argo.js'][157]++;
  var that = this;
  _$jscoverage['argo.js'][159]++;
  that.builder.use((function (handler) {
  _$jscoverage['argo.js'][160]++;
  handler("request", {affinity: "hoist"}, (function (env, next) {
  _$jscoverage['argo.js'][161]++;
  env.argo._http = that._http;
  _$jscoverage['argo.js'][162]++;
  if (! env.argo.currentUrl) {
    _$jscoverage['argo.js'][163]++;
    env.argo.currentUrl = env.request.url;
  }
  _$jscoverage['argo.js'][166]++;
  if (! env.argo.uri) {
    _$jscoverage['argo.js'][167]++;
    env.argo.uri = (function () {
  _$jscoverage['argo.js'][168]++;
  var xfp = env.request.headers["x-forwarded-proto"];
  _$jscoverage['argo.js'][169]++;
  var protocol;
  _$jscoverage['argo.js'][171]++;
  if (xfp && xfp.length) {
    _$jscoverage['argo.js'][172]++;
    protocol = xfp.replace(/\s*/, "").split(",")[0];
  }
  else {
    _$jscoverage['argo.js'][174]++;
    protocol = env.request.connection.encrypted? "https": "http";
  }
  _$jscoverage['argo.js'][177]++;
  var host = env.request.headers.host;
  _$jscoverage['argo.js'][179]++;
  if (! host) {
    _$jscoverage['argo.js'][180]++;
    var address = env.request.connection.address();
    _$jscoverage['argo.js'][181]++;
    host = address.address;
    _$jscoverage['argo.js'][182]++;
    if (address.port) {
      _$jscoverage['argo.js'][183]++;
      if (! (protocol === "https" && address.port === 443) && ! (protocol === "http" && address.port === 80)) {
        _$jscoverage['argo.js'][185]++;
        host += ":" + address.port;
      }
    }
  }
  _$jscoverage['argo.js'][190]++;
  return protocol + "://" + path.join(host, env.request.url);
});
  }
  _$jscoverage['argo.js'][193]++;
  next(env);
}));
}));
});
_$jscoverage['argo.js'][198]++;
Argo.prototype.build = (function () {
  _$jscoverage['argo.js'][199]++;
  var that = this;
  _$jscoverage['argo.js'][201]++;
  that.buildCore();
  _$jscoverage['argo.js'][203]++;
  that.builder.run(that._target);
  _$jscoverage['argo.js'][206]++;
  that.builder.use((function (handle) {
  _$jscoverage['argo.js'][207]++;
  handle("response", {affinity: "sink"}, (function (env, next) {
  _$jscoverage['argo.js'][208]++;
  if (env.response.body !== null && env.response.body !== undefined) {
    _$jscoverage['argo.js'][209]++;
    var body = env.response.body;
    _$jscoverage['argo.js'][210]++;
    if (typeof body === "string") {
      _$jscoverage['argo.js'][211]++;
      env.response.setHeader("Content-Length", body? body.length: 0);
      _$jscoverage['argo.js'][212]++;
      env.response.writeHead(env.response.statusCode, env.response.headers);
      _$jscoverage['argo.js'][213]++;
      env.response.end(body);
    }
    else {
      _$jscoverage['argo.js'][214]++;
      if (body instanceof Stream) {
        _$jscoverage['argo.js'][215]++;
        env.response.writeHead(env.response.statusCode, env.response.headers);
        _$jscoverage['argo.js'][216]++;
        body.pipe(env.response);
      }
      else {
        _$jscoverage['argo.js'][217]++;
        if (body instanceof Buffer) {
          _$jscoverage['argo.js'][218]++;
          env.response.writeHead(env.response.statusCode, env.response.headers);
          _$jscoverage['argo.js'][219]++;
          env.response.end(body);
        }
        else {
          _$jscoverage['argo.js'][220]++;
          if (typeof body === "object") {
            _$jscoverage['argo.js'][221]++;
            body = new Buffer(JSON.stringify(body), "utf-8");
            _$jscoverage['argo.js'][222]++;
            if (! env.response.getHeader("Content-Type")) {
              _$jscoverage['argo.js'][223]++;
              env.response.setHeader("Content-Type", "application/json; charset=UTF-8");
            }
            _$jscoverage['argo.js'][225]++;
            env.response.setHeader("Content-Length", body? body.length: 0);
            _$jscoverage['argo.js'][226]++;
            env.response.writeHead(env.response.statusCode, env.response.headers);
            _$jscoverage['argo.js'][227]++;
            env.response.end(body.toString("utf-8"));
          }
        }
      }
    }
  }
  else {
    _$jscoverage['argo.js'][230]++;
    var contentLength = env.response.getHeader("Content-Length");
    _$jscoverage['argo.js'][231]++;
    if (contentLength == "0") {
      _$jscoverage['argo.js'][232]++;
      env.response.writeHead(env.response.statusCode, env.response.headers);
      _$jscoverage['argo.js'][233]++;
      env.response.end();
    }
    else {
      _$jscoverage['argo.js'][234]++;
      if (env.target.response !== null && env.target.response !== undefined) {
        _$jscoverage['argo.js'][235]++;
        env.target.response.getBody((function (err, body) {
  _$jscoverage['argo.js'][236]++;
  env.response.setHeader("Content-Length", body? body.length: 0);
  _$jscoverage['argo.js'][237]++;
  env.response.writeHead(env.response.statusCode, env.response.headers);
  _$jscoverage['argo.js'][238]++;
  env.response.end(body);
}));
      }
      else {
        _$jscoverage['argo.js'][241]++;
        env.response.setHeader("Content-Length", "0");
        _$jscoverage['argo.js'][242]++;
        env.response.writeHead(env.response.statusCode, env.response.headers);
        _$jscoverage['argo.js'][243]++;
        env.response.end();
      }
    }
  }
}));
}));
  _$jscoverage['argo.js'][249]++;
  var built = that.builder.build();
  _$jscoverage['argo.js'][250]++;
  built._pipeline = this._pipeline;
  _$jscoverage['argo.js'][252]++;
  var self = this;
  _$jscoverage['argo.js'][253]++;
  built.run = (function (req, res) {
  _$jscoverage['argo.js'][254]++;
  var env = environment(self, req, res);
  _$jscoverage['argo.js'][255]++;
  built.flow(env);
});
  _$jscoverage['argo.js'][258]++;
  return built;
});
_$jscoverage['argo.js'][261]++;
Argo.prototype.call = (function (env) {
  _$jscoverage['argo.js'][262]++;
  var app = this.build();
  _$jscoverage['argo.js'][263]++;
  return app.flow(env);
});
_$jscoverage['argo.js'][266]++;
Argo.prototype.route = (function (path, options, handleFn) {
  _$jscoverage['argo.js'][267]++;
  if (typeof options === "function") {
    _$jscoverage['argo.js'][268]++;
    handleFn = options;
    _$jscoverage['argo.js'][269]++;
    options = {};
  }
  _$jscoverage['argo.js'][272]++;
  var opts = {methods: options.methods, actsAsPrefix: false};
  _$jscoverage['argo.js'][277]++;
  this.router.add(path, options, handleFn);
  _$jscoverage['argo.js'][279]++;
  var self = this;
  _$jscoverage['argo.js'][280]++;
  this.builder.use((function addRouteHandleFn(handleFn) {
  _$jscoverage['argo.js'][281]++;
  self._route(self.router, handleFn);
}));
  _$jscoverage['argo.js'][284]++;
  return this;
});
_$jscoverage['argo.js'][287]++;
Argo.prototype._routeMap = (function (path, options, handleFn) {
  _$jscoverage['argo.js'][288]++;
  if (typeof options === "function") {
    _$jscoverage['argo.js'][289]++;
    handleFn = options;
    _$jscoverage['argo.js'][290]++;
    options = {};
  }
  _$jscoverage['argo.js'][293]++;
  var opts = {methods: options.methods, actsAsPrefix: true};
  _$jscoverage['argo.js'][298]++;
  this.router.add(path, opts, handleFn);
  _$jscoverage['argo.js'][300]++;
  var self = this;
  _$jscoverage['argo.js'][301]++;
  this.builder.use((function addRouteHandleFn(handleFn) {
  _$jscoverage['argo.js'][302]++;
  self._route(self.router, handleFn);
}));
  _$jscoverage['argo.js'][305]++;
  return this;
});
_$jscoverage['argo.js'][308]++;
var methods = {"get": "GET", "post": "POST", "put": "PUT", "del": "DELETE", "head": "HEAD", "options": "OPTIONS", "trace": "TRACE"};
_$jscoverage['argo.js'][318]++;
Object.keys(methods).forEach((function (method) {
  _$jscoverage['argo.js'][319]++;
  Argo.prototype[method] = (function (path, options, handlers) {
  _$jscoverage['argo.js'][320]++;
  if (typeof options === "function") {
    _$jscoverage['argo.js'][321]++;
    handlers = options;
    _$jscoverage['argo.js'][322]++;
    options = {};
  }
  _$jscoverage['argo.js'][324]++;
  options.methods = [methods[method]];
  _$jscoverage['argo.js'][325]++;
  return this.route(path, options, handlers);
});
}));
_$jscoverage['argo.js'][329]++;
Argo.prototype.map = (function (path, options, handler) {
  _$jscoverage['argo.js'][330]++;
  if (typeof options === "function") {
    _$jscoverage['argo.js'][331]++;
    handler = options;
    _$jscoverage['argo.js'][332]++;
    options = {};
  }
  _$jscoverage['argo.js'][335]++;
  var that = this;
  _$jscoverage['argo.js'][336]++;
  function generateHandler(path, handler) {
    _$jscoverage['argo.js'][337]++;
    var argo = new Argo(that._http);
    _$jscoverage['argo.js'][338]++;
    argo.router = that.router.create();
    _$jscoverage['argo.js'][340]++;
    handler(argo);
    _$jscoverage['argo.js'][342]++;
    var app = argo.embed();
    _$jscoverage['argo.js'][344]++;
    return (function (handler) {
  _$jscoverage['argo.js'][345]++;
  handler("request", (function mapHandler(env, next) {
  _$jscoverage['argo.js'][346]++;
  env.argo.frames = env.argo.frames || [];
  _$jscoverage['argo.js'][348]++;
  var frame = new Frame();
  _$jscoverage['argo.js'][349]++;
  frame.routed = env.argo._routed;
  _$jscoverage['argo.js'][350]++;
  frame.routedResponseHandler = env.argo._routedResponseHandler;
  _$jscoverage['argo.js'][351]++;
  frame.targetUrl = env.target.url;
  _$jscoverage['argo.js'][353]++;
  env.argo._routed = false;
  _$jscoverage['argo.js'][354]++;
  env.argo._routedResponseHandler = null;
  _$jscoverage['argo.js'][355]++;
  env.target.url = null;
  _$jscoverage['argo.js'][357]++;
  if (env.argo.currentUrl[env.argo.currentUrl.length - 1] === "/") {
    _$jscoverage['argo.js'][358]++;
    env.argo.currentUrl = env.argo.currentUrl.substr(0, env.argo.currentUrl.length - 1);
  }
  _$jscoverage['argo.js'][361]++;
  frame.routeUri = path;
  _$jscoverage['argo.js'][363]++;
  var previousUrl = env.argo.currentUrl;
  _$jscoverage['argo.js'][364]++;
  env.argo.currentUrl = that.router.truncate(env.argo.currentUrl, frame.routeUri) || "/";
  _$jscoverage['argo.js'][368]++;
  if (env.argo.oncomplete) {
    _$jscoverage['argo.js'][369]++;
    frame.oncomplete = env.argo.oncomplete;
  }
  _$jscoverage['argo.js'][372]++;
  env.argo.currentFrame = frame;
  _$jscoverage['argo.js'][373]++;
  env.argo.frames.push(frame);
  _$jscoverage['argo.js'][375]++;
  env.argo.oncomplete = (function (env) {
  _$jscoverage['argo.js'][376]++;
  var frame = env.argo.frames.pop();
  _$jscoverage['argo.js'][378]++;
  env.argo._routed = frame.routed;
  _$jscoverage['argo.js'][379]++;
  env.argo._routedResponseHandler = frame.routedResponseHandler;
  _$jscoverage['argo.js'][380]++;
  env.argo.currentUrl = previousUrl;
  _$jscoverage['argo.js'][381]++;
  env.argo.oncomplete = frame.oncomplete;
  _$jscoverage['argo.js'][382]++;
  env.target.url = frame.targetUrl;
  _$jscoverage['argo.js'][384]++;
  next(env);
});
  _$jscoverage['argo.js'][387]++;
  app.flow(env);
}));
});
}
  _$jscoverage['argo.js'][390]++;
  ;
  _$jscoverage['argo.js'][392]++;
  return this._routeMap(path, options, generateHandler(path, handler));
});
_$jscoverage['argo.js'][395]++;
Argo.prototype._pipeline = (function (name) {
  _$jscoverage['argo.js'][396]++;
  return this.builder.pipelineMap[name];
});
_$jscoverage['argo.js'][399]++;
Argo.prototype._addRouteHandlers = (function (handlers) {
  _$jscoverage['argo.js'][400]++;
  return (function add(name, opts, cb) {
  _$jscoverage['argo.js'][401]++;
  if (typeof opts === "function") {
    _$jscoverage['argo.js'][402]++;
    cb = opts;
    _$jscoverage['argo.js'][403]++;
    opts = null;
  }
  _$jscoverage['argo.js'][406]++;
  if (name === "request") {
    _$jscoverage['argo.js'][407]++;
    handlers.request.push(cb);
  }
  else {
    _$jscoverage['argo.js'][408]++;
    if (name === "response") {
      _$jscoverage['argo.js'][409]++;
      handlers.response.push(cb);
    }
  }
});
});
_$jscoverage['argo.js'][414]++;
function RouteHandlers() {
  _$jscoverage['argo.js'][415]++;
  this.request = [];
  _$jscoverage['argo.js'][416]++;
  this.response = [];
}
_$jscoverage['argo.js'][419]++;
Argo.prototype._routeRequestHandler = (function (router) {
  _$jscoverage['argo.js'][420]++;
  var that = this;
  _$jscoverage['argo.js'][421]++;
  return (function routeRequestHandler(env, next) {
  _$jscoverage['argo.js'][422]++;
  if (env.argo.bypassRoute || env.argo._routed) {
    _$jscoverage['argo.js'][423]++;
    return next(env);
  }
  _$jscoverage['argo.js'][426]++;
  var routeResult = router.find(env.argo.currentUrl, env.request.method);
  _$jscoverage['argo.js'][428]++;
  if (! routeResult.warning) {
    _$jscoverage['argo.js'][429]++;
    env.argo._routed = true;
    _$jscoverage['argo.js'][431]++;
    env.route = env.route || {};
    _$jscoverage['argo.js'][433]++;
    if (routeResult.params) {
      _$jscoverage['argo.js'][434]++;
      env.route.params = routeResult.params;
    }
    _$jscoverage['argo.js'][437]++;
    var fn = routeResult.handlerFn;
    _$jscoverage['argo.js'][439]++;
    var handlers = new RouteHandlers();
    _$jscoverage['argo.js'][440]++;
    fn(that._addRouteHandlers(handlers));
    _$jscoverage['argo.js'][442]++;
    env.argo._routedResponseHandler = handlers.response || null;
    _$jscoverage['argo.js'][444]++;
    if (handlers.request.length) {
      _$jscoverage['argo.js'][445]++;
      var pipeline = pipeworks();
      _$jscoverage['argo.js'][447]++;
      handlers.request.forEach((function (handler) {
  _$jscoverage['argo.js'][448]++;
  pipeline.fit(handler);
}));
      _$jscoverage['argo.js'][451]++;
      pipeline.fit((function (env, n) {
  _$jscoverage['argo.js'][452]++;
  next(env);
}));
      _$jscoverage['argo.js'][455]++;
      pipeline.flow(env);
    }
    else {
      _$jscoverage['argo.js'][457]++;
      next(env);
      _$jscoverage['argo.js'][458]++;
      return;
    }
  }
  else {
    _$jscoverage['argo.js'][460]++;
    if (routeResult.warning === "MethodNotSupported") {
      _$jscoverage['argo.js'][461]++;
      env.response.statusCode = 405;
      _$jscoverage['argo.js'][462]++;
      return next(env);
    }
    else {
      _$jscoverage['argo.js'][464]++;
      env.argo._routed = false;
      _$jscoverage['argo.js'][465]++;
      return next(env);
    }
  }
});
});
_$jscoverage['argo.js'][470]++;
Argo.prototype._routeResponseHandler = (function (router) {
  _$jscoverage['argo.js'][471]++;
  var that = this;
  _$jscoverage['argo.js'][472]++;
  return (function routeResponseHandler(env, next) {
  _$jscoverage['argo.js'][473]++;
  if (! env.argo._routed) {
    _$jscoverage['argo.js'][474]++;
    if (env.response.statusCode !== 405 && ! (env.target && env.target.url) && ! env.response.body) {
      _$jscoverage['argo.js'][477]++;
      env.response.statusCode = 404;
    }
    _$jscoverage['argo.js'][480]++;
    next(env);
    _$jscoverage['argo.js'][481]++;
    return;
  }
  _$jscoverage['argo.js'][484]++;
  if (env.argo._routedResponseHandler && env.argo._routedResponseHandler.length) {
    _$jscoverage['argo.js'][485]++;
    var pipeline = pipeworks();
    _$jscoverage['argo.js'][487]++;
    env.argo._routedResponseHandler.forEach((function (handler) {
  _$jscoverage['argo.js'][488]++;
  pipeline.fit(handler);
}));
    _$jscoverage['argo.js'][491]++;
    pipeline.fit((function (env, n) {
  _$jscoverage['argo.js'][492]++;
  next(env);
}));
    _$jscoverage['argo.js'][495]++;
    pipeline.flow(env);
    _$jscoverage['argo.js'][497]++;
    return;
  }
  else {
    _$jscoverage['argo.js'][499]++;
    next(env);
    _$jscoverage['argo.js'][500]++;
    return;
  }
});
});
_$jscoverage['argo.js'][505]++;
Argo.prototype._route = (function (router, handle) {
  _$jscoverage['argo.js'][506]++;
  handle("route:request", this._routeRequestHandler(router));
  _$jscoverage['argo.js'][507]++;
  handle("route:response", {affinity: "hoist"}, this._routeResponseHandler(router));
});
_$jscoverage['argo.js'][510]++;
Argo.prototype._target = (function (env, next) {
  _$jscoverage['argo.js'][511]++;
  if (env.response._headerSent || env.target.skip) {
    _$jscoverage['argo.js'][512]++;
    next(env);
    _$jscoverage['argo.js'][513]++;
    return;
  }
  _$jscoverage['argo.js'][516]++;
  env.target.skip = true;
  _$jscoverage['argo.js'][518]++;
  if (env.target && env.target.url) {
    _$jscoverage['argo.js'][519]++;
    var options = {};
    _$jscoverage['argo.js'][520]++;
    options.method = env.request.method || "GET";
    _$jscoverage['argo.js'][522]++;
    options.agent = env.argo._agent;
    _$jscoverage['argo.js'][524]++;
    var parsed = url.parse(env.target.url);
    _$jscoverage['argo.js'][525]++;
    var isSecure = parsed.protocol === "https:";
    _$jscoverage['argo.js'][526]++;
    options.hostname = parsed.hostname;
    _$jscoverage['argo.js'][527]++;
    options.port = parsed.port || (isSecure? 443: 80);
    _$jscoverage['argo.js'][528]++;
    options.path = parsed.path;
    _$jscoverage['argo.js'][529]++;
    options.agent = (isSecure? _httpsAgent: _httpAgent);
    _$jscoverage['argo.js'][531]++;
    options.headers = env.request.headers;
    _$jscoverage['argo.js'][533]++;
    options.headers.Host = options.hostname;
    _$jscoverage['argo.js'][535]++;
    if (parsed.auth) {
      _$jscoverage['argo.js'][536]++;
      options.auth = parsed.auth;
    }
    _$jscoverage['argo.js'][539]++;
    var client = (isSecure? https: env.argo._http);
    _$jscoverage['argo.js'][541]++;
    env.argo._routed = true;
    _$jscoverage['argo.js'][542]++;
    var req = client.request(options, (function (res) {
  _$jscoverage['argo.js'][543]++;
  for (var key in res.headers) {
    _$jscoverage['argo.js'][544]++;
    var headerName = res._rawHeaderNames[key] || key;
    _$jscoverage['argo.js'][545]++;
    env.response.setHeader(headerName, res.headers[key]);
}
  _$jscoverage['argo.js'][548]++;
  env.response.statusCode = res.statusCode;
  _$jscoverage['argo.js'][550]++;
  env.target.response = res;
  _$jscoverage['argo.js'][553]++;
  if (next) {
    _$jscoverage['argo.js'][554]++;
    next(env);
  }
}));
    _$jscoverage['argo.js'][558]++;
    req.on("error", (function (err) {
  _$jscoverage['argo.js'][560]++;
  env.response.statusCode = 503;
  _$jscoverage['argo.js'][561]++;
  req.socket.destroy();
  _$jscoverage['argo.js'][562]++;
  next(env);
}));
    _$jscoverage['argo.js'][565]++;
    env.request.getBody((function (err, body) {
  _$jscoverage['argo.js'][566]++;
  if (body) {
    _$jscoverage['argo.js'][567]++;
    req.write(body);
  }
  _$jscoverage['argo.js'][570]++;
  req.end();
}));
  }
  else {
    _$jscoverage['argo.js'][573]++;
    next(env);
  }
});
_$jscoverage['argo.js'][577]++;
var argo = (function (_http) {
  _$jscoverage['argo.js'][577]++;
  return new Argo(_http);
});
_$jscoverage['argo.js'][578]++;
argo.environment = environment;
_$jscoverage['argo.js'][580]++;
module.exports = argo;
_$jscoverage['argo.js'].source = ["var http = require('http');","var https = require('https');","var url = require('url');","var Stream = require('stream');","var path = require('path');","var pipeworks = require('pipeworks');","var environment = require('./environment');","var Frame = require('./frame');","var Builder = require('./builder');","var RegExpRouter = require('./regexp_router');","","// Maximum number of sockets to keep alive per target host","// TODO make this configurable","var SocketPoolSize = 1024;","var _httpAgent, _httpsAgent;","","var Argo = function(_http) {","  this.router = RegExpRouter.create();","  this.builder = new Builder();","  this._http = _http || http;","","  _httpAgent = new this._http.Agent();","  _httpsAgent = new https.Agent();","","  _httpAgent.maxSockets = _httpsAgent.maxSockets = SocketPoolSize;","","  var that = this;","  var incoming = this._http.IncomingMessage.prototype;","","  if (!incoming._argoModified) {","    var _addHeaderLine = incoming._addHeaderLine;","","    incoming._addHeaderLine = function(field, value) {","      this._rawHeaderNames = this._rawHeaderNames || {};","      this._rawHeaderNames[field.toLowerCase()] = field;","","      _addHeaderLine.call(this, field, value);","    };","","    incoming.body = null;","    incoming.getBody = that._getBody();","    incoming._argoModified = true;","  }","","  var serverResponse = this._http.ServerResponse.prototype;","  if (!serverResponse._argoModified) {","    serverResponse.body = null;","    serverResponse.getBody = that._getBody();","","    serverResponse._argoModified = true;","  }","};","","Argo.prototype._getBody = function() {","  return function(callback) {","    if (this.body !== null &amp;&amp; this.body !== undefined) {","      return callback(null, this.body);","    }","","    if (!this.readable) {","      return callback();","    }","","    var self = this;","    this.on('readable', function() {","      var buf = [];","      var len = 0;","","      var chunk;","","      while ((chunk = self.read()) != null) {","        buf.push(chunk);","        len += chunk.length;","      }","","      if (!buf.length) {","        return;","      }","","      var body;","      if (buf.length &amp;&amp; Buffer.isBuffer(buf[0])) {","        body = new Buffer(len);","        var i = 0;","        buf.forEach(function(chunk) {","          chunk.copy(body, i, 0, chunk.length);","          i += chunk.length;","        });","      } else if (buf.length) {","        body = buf.join('');","      }","","      self.body = body;","    });","","    var error = null;","    this.on('error', function(err) {","      error = err;","    });","","    this.on('end', function() {","      callback(error, self.body);","    });","","    if (typeof this.read === 'function') {","      this.read(0);","    }","  };","};","","Argo.prototype.include = function(mod) {","  var p = mod.package(this);","  p.install();","  return this;","};","","Argo.prototype.listen = function(port) {","  var app = this.build();","","  this._http.createServer(app.run).listen(port);","","  return this;","};","","Argo.prototype.use = function(middleware) {","  if (middleware.package) {","    return this.include(middleware);","  }","  this.builder.use(middleware);","  return this;","};","","Argo.prototype.target = function(url) {","  return this.use(function(handler) {","    handler('request', function(env, next) {","      env.target.url = url + (env.request.url || '');","      next(env);","    });","  });","};","","Argo.prototype.embed = function() {","  this.buildCore();","","  this.builder.run(this._target);","  this.builder.use(function(handler) {","    handler('response', { affinity: 'sink' }, function(env, next) {","      if (env.argo.oncomplete) {","        env.argo.oncomplete(env);","      };","    });","  });","","  return this.builder.build();","}","","Argo.prototype.buildCore = function() {","  var that = this;","","  that.builder.use(function(handler) {","    handler('request', { affinity: 'hoist' }, function(env, next) {","      env.argo._http = that._http;","      if (!env.argo.currentUrl) {","        env.argo.currentUrl = env.request.url;","      }","","      if (!env.argo.uri) {","        env.argo.uri = function() {","          var xfp = env.request.headers['x-forwarded-proto'];","          var protocol;","","          if (xfp &amp;&amp; xfp.length) {","            protocol = xfp.replace(/\\s*/, '').split(',')[0];","          } else {","            protocol = env.request.connection.encrypted ? 'https' : 'http';","          }","","          var host = env.request.headers['host'];","","          if (!host) {","            var address = env.request.connection.address();","            host = address.address;","            if (address.port) {","              if (!(protocol === 'https' &amp;&amp; address.port === 443) &amp;&amp; ","                  !(protocol === 'http' &amp;&amp; address.port === 80)) {","                host += ':' + address.port","              }","            }","          }","","          return protocol + '://' + path.join(host, env.request.url);","        }","      }","      next(env);","    });","  });","};","","Argo.prototype.build = function() {","  var that = this;","","  that.buildCore();","","  that.builder.run(that._target);","","  // response ender","  that.builder.use(function(handle) {","    handle('response', { affinity: 'sink' }, function(env, next) {","      if (env.response.body !== null &amp;&amp; env.response.body !== undefined) {","        var body = env.response.body;","        if (typeof body === 'string') {","          env.response.setHeader('Content-Length', body ? body.length : 0); ","          env.response.writeHead(env.response.statusCode, env.response.headers);","          env.response.end(body);","        } else if (body instanceof Stream) {","          env.response.writeHead(env.response.statusCode, env.response.headers);","          body.pipe(env.response);","        } else if (body instanceof Buffer) {","          env.response.writeHead(env.response.statusCode, env.response.headers);","          env.response.end(body);","        } else if (typeof body === 'object') {","          body = new Buffer(JSON.stringify(body), 'utf-8');","          if (!env.response.getHeader('Content-Type')) {","            env.response.setHeader('Content-Type', 'application/json; charset=UTF-8');","          }","          env.response.setHeader('Content-Length', body ? body.length : 0); ","          env.response.writeHead(env.response.statusCode, env.response.headers);","          env.response.end(body.toString('utf-8'));","        }","      } else {","        var contentLength = env.response.getHeader('Content-Length');","        if (contentLength == '0') {","          env.response.writeHead(env.response.statusCode, env.response.headers);","          env.response.end();","        } else if (env.target.response !== null &amp;&amp; env.target.response !== undefined) {","          env.target.response.getBody(function(err, body) {","            env.response.setHeader('Content-Length', body ? body.length : 0); ","            env.response.writeHead(env.response.statusCode, env.response.headers);","            env.response.end(body);","          });","        } else {","          env.response.setHeader('Content-Length', '0'); ","          env.response.writeHead(env.response.statusCode, env.response.headers);","          env.response.end();","        }","      }","    });","  });","","  var built = that.builder.build();","  built._pipeline = this._pipeline;","","  var self = this;","  built.run = function(req, res) {","    var env = environment(self, req, res);","    built.flow(env);","  }","","  return built;","};","","Argo.prototype.call = function(env) {","  var app = this.build();","  return app.flow(env);","}","","Argo.prototype.route = function(path, options, handleFn) {","  if (typeof(options) === 'function') {","    handleFn = options;","    options = {};","  }","","  var opts = {","    methods: options.methods,","    actsAsPrefix: false","  };","","  this.router.add(path, options, handleFn);","","  var self = this;","  this.builder.use(function addRouteHandleFn(handleFn) { ","   self._route(self.router, handleFn);","  });","","  return this;","};","","Argo.prototype._routeMap = function(path, options, handleFn) {","  if (typeof(options) === 'function') {","    handleFn = options;","    options = {};","  }","","  var opts = {","    methods: options.methods,","    actsAsPrefix: true","  };","","  this.router.add(path, opts, handleFn);","","  var self = this;","  this.builder.use(function addRouteHandleFn(handleFn) { ","   self._route(self.router, handleFn);","  });","","  return this;","};","","var methods = {","  'get': 'GET',","  'post': 'POST',","  'put': 'PUT',","  'del': 'DELETE',","  'head': 'HEAD',","  'options': 'OPTIONS',","  'trace': 'TRACE'","};","","Object.keys(methods).forEach(function(method) {","  Argo.prototype[method] = function(path, options, handlers) {","    if (typeof(options) === 'function') {","      handlers = options;","      options = {};","    }","    options.methods = [methods[method]];","    return this.route(path, options, handlers);","  };","});","","Argo.prototype.map = function(path, options, handler) {","  if (typeof(options) === 'function') {","    handler = options;","    options = {};","  }","","  var that = this;","  function generateHandler(path, handler) {","    var argo = new Argo(that._http);","    argo.router = that.router.create();","","    handler(argo);","","    var app = argo.embed();","","    return function(handler) {","      handler('request', function mapHandler(env, next) {","        env.argo.frames = env.argo.frames || [];","        ","        var frame = new Frame();","        frame.routed = env.argo._routed;","        frame.routedResponseHandler = env.argo._routedResponseHandler;","        frame.targetUrl = env.target.url;","","        env.argo._routed = false;","        env.argo._routedResponseHandler = null;","        env.target.url = null;","","        if (env.argo.currentUrl[env.argo.currentUrl.length - 1] === '/') {","          env.argo.currentUrl = env.argo.currentUrl.substr(0, env.argo.currentUrl.length - 1);","        }","","        frame.routeUri = path;","","        var previousUrl = env.argo.currentUrl;","        env.argo.currentUrl = that.router.truncate(env.argo.currentUrl, frame.routeUri) || '/';","","        // TODO: See if this can work in a response handler here.","        ","        if (env.argo.oncomplete) {","          frame.oncomplete = env.argo.oncomplete;","        }","","        env.argo.currentFrame = frame;","        env.argo.frames.push(frame);","","        env.argo.oncomplete = function(env) {","          var frame = env.argo.frames.pop();","","          env.argo._routed = frame.routed;","          env.argo._routedResponseHandler = frame.routedResponseHandler;","          env.argo.currentUrl = previousUrl;","          env.argo.oncomplete = frame.oncomplete;","          env.target.url = frame.targetUrl;","","          next(env);","        };","","        app.flow(env);","      });","    };","  };","","  return this._routeMap(path, options, generateHandler(path, handler));","};","","Argo.prototype._pipeline = function(name) {","  return this.builder.pipelineMap[name];","};","","Argo.prototype._addRouteHandlers = function(handlers) {","  return function add(name, opts, cb) {","    if (typeof opts === 'function') {","      cb = opts;","      opts = null;","    }","","    if (name === 'request') {","      handlers.request.push(cb);","    } else if (name === 'response') {","      handlers.response.push(cb);","    }","  };","};","","function RouteHandlers() {","  this.request = [];","  this.response = [];","}","","Argo.prototype._routeRequestHandler = function(router) {","  var that = this;","  return function routeRequestHandler(env, next) {","    if (env.argo.bypassRoute || env.argo._routed) {","      return next(env);","    }","","    var routeResult = router.find(env.argo.currentUrl, env.request.method);","","    if (!routeResult.warning) {","      env.argo._routed = true;","","      env.route = env.route || {};","","      if (routeResult.params) {","        env.route.params = routeResult.params;","      }","","      var fn = routeResult.handlerFn;","","      var handlers = new RouteHandlers();","      fn(that._addRouteHandlers(handlers));","","      env.argo._routedResponseHandler = handlers.response || null;","","      if (handlers.request.length) {","        var pipeline = pipeworks();","","        handlers.request.forEach(function(handler) {","          pipeline.fit(handler);","        });","","        pipeline.fit(function(env, n) {","          next(env);","        });","","        pipeline.flow(env);","      } else {","        next(env);","        return;","      }","    } else if (routeResult.warning === 'MethodNotSupported') {","      env.response.statusCode = 405;","      return next(env);","    } else {","      env.argo._routed = false;","      return next(env);","    }","  };","};","","Argo.prototype._routeResponseHandler = function(router) {","  var that = this;","  return function routeResponseHandler(env, next) {","    if (!env.argo._routed) {","      if (env.response.statusCode !== 405","          &amp;&amp; !(env.target &amp;&amp; env.target.url)","          &amp;&amp; !env.response.body) {","        env.response.statusCode = 404;","      }","","      next(env);","      return;","    }","","    if (env.argo._routedResponseHandler &amp;&amp; env.argo._routedResponseHandler.length) {","      var pipeline = pipeworks();","","      env.argo._routedResponseHandler.forEach(function(handler) {","        pipeline.fit(handler);","      });","","      pipeline.fit(function(env, n) {","        next(env);","      });","","      pipeline.flow(env);","","      return;","    } else {","      next(env);","      return;","    }","  };","};","","Argo.prototype._route = function(router, handle) {","  handle('route:request', this._routeRequestHandler(router));","  handle('route:response', { affinity: 'hoist' }, this._routeResponseHandler(router));","};","","Argo.prototype._target = function(env, next) {","  if (env.response._headerSent || env.target.skip) {","    next(env);","    return;","  }","","  env.target.skip = true;","","  if (env.target &amp;&amp; env.target.url) {","    var options = {};","    options.method = env.request.method || 'GET';","","    options.agent = env.argo._agent;","","    var parsed = url.parse(env.target.url);","    var isSecure = parsed.protocol === 'https:';","    options.hostname = parsed.hostname;","    options.port = parsed.port || (isSecure ? 443 : 80);","    options.path = parsed.path;","    options.agent = (isSecure ? _httpsAgent : _httpAgent);","","    options.headers = env.request.headers;","    //options.headers['Connection'] = 'keep-alive';","    options.headers['Host'] = options.hostname;","","    if (parsed.auth) {","      options.auth = parsed.auth;","    }","","    var client = (isSecure ? https : env.argo._http);","","    env.argo._routed = true;","    var req = client.request(options, function(res) {","      for (var key in res.headers) {","        var headerName = res._rawHeaderNames[key] || key;","        env.response.setHeader(headerName, res.headers[key]);","      }","","      env.response.statusCode = res.statusCode;","","      env.target.response = res;","","","      if (next) {","        next(env);","      }","    });","","    req.on('error', function(err) {","      // Error connecting to the target or target not available -- respond with an error","      env.response.statusCode = 503;","      req.socket.destroy();","      next(env);","    });","","    env.request.getBody(function(err, body) {","      if (body) {","        req.write(body);","      }","","      req.end();","    });","  } else {","    next(env);","  }","};","","var argo = function(_http) { return new Argo(_http); }","argo.environment = environment;","","module.exports = argo;"];
