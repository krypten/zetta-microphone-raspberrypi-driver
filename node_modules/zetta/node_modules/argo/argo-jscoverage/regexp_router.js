/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['regexp_router.js']) {
  _$jscoverage['regexp_router.js'] = [];
  _$jscoverage['regexp_router.js'][1] = 0;
  _$jscoverage['regexp_router.js'][2] = 0;
  _$jscoverage['regexp_router.js'][3] = 0;
  _$jscoverage['regexp_router.js'][4] = 0;
  _$jscoverage['regexp_router.js'][7] = 0;
  _$jscoverage['regexp_router.js'][8] = 0;
  _$jscoverage['regexp_router.js'][9] = 0;
  _$jscoverage['regexp_router.js'][12] = 0;
  _$jscoverage['regexp_router.js'][13] = 0;
  _$jscoverage['regexp_router.js'][14] = 0;
  _$jscoverage['regexp_router.js'][15] = 0;
  _$jscoverage['regexp_router.js'][18] = 0;
  _$jscoverage['regexp_router.js'][19] = 0;
  _$jscoverage['regexp_router.js'][22] = 0;
  _$jscoverage['regexp_router.js'][23] = 0;
  _$jscoverage['regexp_router.js'][27] = 0;
  _$jscoverage['regexp_router.js'][28] = 0;
  _$jscoverage['regexp_router.js'][29] = 0;
  _$jscoverage['regexp_router.js'][32] = 0;
  _$jscoverage['regexp_router.js'][34] = 0;
  _$jscoverage['regexp_router.js'][35] = 0;
  _$jscoverage['regexp_router.js'][36] = 0;
  _$jscoverage['regexp_router.js'][40] = 0;
  _$jscoverage['regexp_router.js'][41] = 0;
  _$jscoverage['regexp_router.js'][42] = 0;
  _$jscoverage['regexp_router.js'][43] = 0;
  _$jscoverage['regexp_router.js'][44] = 0;
  _$jscoverage['regexp_router.js'][46] = 0;
  _$jscoverage['regexp_router.js'][47] = 0;
  _$jscoverage['regexp_router.js'][48] = 0;
  _$jscoverage['regexp_router.js'][51] = 0;
  _$jscoverage['regexp_router.js'][52] = 0;
  _$jscoverage['regexp_router.js'][54] = 0;
  _$jscoverage['regexp_router.js'][55] = 0;
  _$jscoverage['regexp_router.js'][56] = 0;
  _$jscoverage['regexp_router.js'][57] = 0;
  _$jscoverage['regexp_router.js'][61] = 0;
  _$jscoverage['regexp_router.js'][62] = 0;
  _$jscoverage['regexp_router.js'][65] = 0;
  _$jscoverage['regexp_router.js'][68] = 0;
  _$jscoverage['regexp_router.js'][69] = 0;
  _$jscoverage['regexp_router.js'][70] = 0;
  _$jscoverage['regexp_router.js'][73] = 0;
  _$jscoverage['regexp_router.js'][77] = 0;
  _$jscoverage['regexp_router.js'][80] = 0;
  _$jscoverage['regexp_router.js'][81] = 0;
  _$jscoverage['regexp_router.js'][82] = 0;
  _$jscoverage['regexp_router.js'][83] = 0;
  _$jscoverage['regexp_router.js'][86] = 0;
  _$jscoverage['regexp_router.js'][87] = 0;
  _$jscoverage['regexp_router.js'][88] = 0;
  _$jscoverage['regexp_router.js'][91] = 0;
  _$jscoverage['regexp_router.js'][92] = 0;
  _$jscoverage['regexp_router.js'][93] = 0;
  _$jscoverage['regexp_router.js'][94] = 0;
  _$jscoverage['regexp_router.js'][97] = 0;
  _$jscoverage['regexp_router.js'][99] = 0;
  _$jscoverage['regexp_router.js'][101] = 0;
  _$jscoverage['regexp_router.js'][105] = 0;
  _$jscoverage['regexp_router.js'][106] = 0;
}
_$jscoverage['regexp_router.js'][1]++;
var RegExpRouterResult = (function () {
  _$jscoverage['regexp_router.js'][2]++;
  this.warning = null;
  _$jscoverage['regexp_router.js'][3]++;
  this.params = null;
  _$jscoverage['regexp_router.js'][4]++;
  this.handlerFn = null;
});
_$jscoverage['regexp_router.js'][7]++;
var RegExpRouter = module.exports = (function () {
  _$jscoverage['regexp_router.js'][8]++;
  this._router = [];
  _$jscoverage['regexp_router.js'][9]++;
  this._routerKeys = [];
});
_$jscoverage['regexp_router.js'][12]++;
RegExpRouter.prototype.add = (function (path, options, handleFn) {
  _$jscoverage['regexp_router.js'][13]++;
  if (options.actsAsPrefix) {
    _$jscoverage['regexp_router.js'][14]++;
    if (path.slice(-1) === "$") {
      _$jscoverage['regexp_router.js'][15]++;
      path = path.slice(0, -1);
    }
    _$jscoverage['regexp_router.js'][18]++;
    if (path[0] !== "^") {
      _$jscoverage['regexp_router.js'][19]++;
      path = "^" + path;
    }
  }
  else {
    _$jscoverage['regexp_router.js'][22]++;
    if (path !== "*" && path.slice(-1) !== "$") {
      _$jscoverage['regexp_router.js'][23]++;
      path = path + "$";
    }
  }
  _$jscoverage['regexp_router.js'][27]++;
  if (! this._router[path]) {
    _$jscoverage['regexp_router.js'][28]++;
    this._router[path] = {};
    _$jscoverage['regexp_router.js'][29]++;
    this._routerKeys.push(path);
  }
  _$jscoverage['regexp_router.js'][32]++;
  var methods = options.methods || ["*"];
  _$jscoverage['regexp_router.js'][34]++;
  var that = this;
  _$jscoverage['regexp_router.js'][35]++;
  methods.forEach((function (method) {
  _$jscoverage['regexp_router.js'][36]++;
  that._router[path][method.toLowerCase()] = handleFn;
}));
});
_$jscoverage['regexp_router.js'][40]++;
RegExpRouter.prototype.find = (function (path, method) {
  _$jscoverage['regexp_router.js'][41]++;
  var routerKey;
  _$jscoverage['regexp_router.js'][42]++;
  var found = false;
  _$jscoverage['regexp_router.js'][43]++;
  var params = {};
  _$jscoverage['regexp_router.js'][44]++;
  method = method.toLowerCase();
  _$jscoverage['regexp_router.js'][46]++;
  this._routerKeys.forEach((function (key) {
  _$jscoverage['regexp_router.js'][47]++;
  if (found || key === "*") {
    _$jscoverage['regexp_router.js'][48]++;
    return;
  }
  _$jscoverage['regexp_router.js'][51]++;
  var re = new RegExp(key);
  _$jscoverage['regexp_router.js'][52]++;
  var testMatch = re.test(path);
  _$jscoverage['regexp_router.js'][54]++;
  if (! routerKey && key !== "*" && testMatch) {
    _$jscoverage['regexp_router.js'][55]++;
    found = true;
    _$jscoverage['regexp_router.js'][56]++;
    routerKey = key;
    _$jscoverage['regexp_router.js'][57]++;
    params = re.exec(path);
  }
}));
  _$jscoverage['regexp_router.js'][61]++;
  if (! routerKey && this._router["*"]) {
    _$jscoverage['regexp_router.js'][62]++;
    routerKey = "*";
  }
  _$jscoverage['regexp_router.js'][65]++;
  if (routerKey && (! this._router[routerKey][method] && ! this._router[routerKey]["*"])) {
    _$jscoverage['regexp_router.js'][68]++;
    var result = new RegExpRouterResult();
    _$jscoverage['regexp_router.js'][69]++;
    result.warning = "MethodNotSupported";
    _$jscoverage['regexp_router.js'][70]++;
    return result;
  }
  _$jscoverage['regexp_router.js'][73]++;
  if (routerKey && (this._router[routerKey][method] || this._router[routerKey]["*"])) {
    _$jscoverage['regexp_router.js'][77]++;
    var fn = this._router[routerKey][method]? this._router[routerKey][method]: this._router[routerKey]["*"];
    _$jscoverage['regexp_router.js'][80]++;
    var result = new RegExpRouterResult();
    _$jscoverage['regexp_router.js'][81]++;
    result.params = params;
    _$jscoverage['regexp_router.js'][82]++;
    result.handlerFn = fn;
    _$jscoverage['regexp_router.js'][83]++;
    return result;
  }
  _$jscoverage['regexp_router.js'][86]++;
  var result = new RegExpRouterResult();
  _$jscoverage['regexp_router.js'][87]++;
  result.warning = "NotFound";
  _$jscoverage['regexp_router.js'][88]++;
  return result;
});
_$jscoverage['regexp_router.js'][91]++;
RegExpRouter.prototype.truncate = (function (path, pattern) {
  _$jscoverage['regexp_router.js'][92]++;
  if (pattern !== "*") {
    _$jscoverage['regexp_router.js'][93]++;
    if (pattern[0] !== "^") {
      _$jscoverage['regexp_router.js'][94]++;
      pattern = "^" + pattern;
    }
    _$jscoverage['regexp_router.js'][97]++;
    var re = new RegExp(pattern);
    _$jscoverage['regexp_router.js'][99]++;
    return path.replace(re, "");
  }
  else {
    _$jscoverage['regexp_router.js'][101]++;
    return path;
  }
});
_$jscoverage['regexp_router.js'][105]++;
RegExpRouter.create = RegExpRouter.prototype.create = (function () {
  _$jscoverage['regexp_router.js'][106]++;
  return new RegExpRouter();
});
_$jscoverage['regexp_router.js'].source = ["var RegExpRouterResult = function() {","  this.warning = null;","  this.params = null;","  this.handlerFn = null;","};","","var RegExpRouter = module.exports = function() {","  this._router = [];","  this._routerKeys = [];","};","","RegExpRouter.prototype.add = function(path, options, handleFn) {","  if (options.actsAsPrefix) {","    if (path.slice(-1) === '$') {","      path = path.slice(0, -1);","    }","","    if (path[0] !== '^') {","      path = '^' + path;","    }","  } else {","    if (path !== '*' &amp;&amp; path.slice(-1) !== '$') {","      path = path + '$';","    }","  }","","  if (!this._router[path]) {","    this._router[path] = {};","    this._routerKeys.push(path);","  }","","  var methods = options.methods || ['*'];","","  var that = this;","  methods.forEach(function(method) {","    that._router[path][method.toLowerCase()] = handleFn;","  });","};","","RegExpRouter.prototype.find = function(path, method) {","  var routerKey;","  var found = false;","  var params = {};","  method = method.toLowerCase();","","  this._routerKeys.forEach(function(key) {","    if (found || key === '*') {","      return;","    }","","    var re = new RegExp(key);","    var testMatch = re.test(path);","","    if (!routerKey &amp;&amp; key !== '*' &amp;&amp; testMatch) {","      found = true;","      routerKey = key;","      params = re.exec(path);","    }","  });","","  if (!routerKey &amp;&amp; this._router['*']) {","    routerKey = '*';","  }","","  if (routerKey &amp;&amp;","      (!this._router[routerKey][method] &amp;&amp;","       !this._router[routerKey]['*'])) {","    var result = new RegExpRouterResult();","    result.warning = 'MethodNotSupported';","    return result;","  }","","  if (routerKey &amp;&amp;","      (this._router[routerKey][method] ||","       this._router[routerKey]['*'])) {","","    var fn = this._router[routerKey][method] ? this._router[routerKey][method] ","      : this._router[routerKey]['*'];","","    var result = new RegExpRouterResult();","    result.params = params;","    result.handlerFn = fn;","    return result;","  }","","  var result = new RegExpRouterResult();","  result.warning = 'NotFound';","  return result;","};","","RegExpRouter.prototype.truncate = function(path, pattern) {","  if (pattern !== '*') {","    if (pattern[0] !== '^') {","      pattern = '^' + pattern; // make sure it's a prefix","    }","","    var re = new RegExp(pattern);","","    return path.replace(re, '');","  } else {","    return path;","  }","};","","RegExpRouter.create = RegExpRouter.prototype.create = function() {","  return new RegExpRouter();","};"];
