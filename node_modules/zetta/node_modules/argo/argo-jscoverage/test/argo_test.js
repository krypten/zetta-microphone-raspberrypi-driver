/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['test/argo_test.js']) {
  _$jscoverage['test/argo_test.js'] = [];
  _$jscoverage['test/argo_test.js'][1] = 0;
  _$jscoverage['test/argo_test.js'][2] = 0;
  _$jscoverage['test/argo_test.js'][3] = 0;
  _$jscoverage['test/argo_test.js'][4] = 0;
  _$jscoverage['test/argo_test.js'][5] = 0;
  _$jscoverage['test/argo_test.js'][6] = 0;
  _$jscoverage['test/argo_test.js'][7] = 0;
  _$jscoverage['test/argo_test.js'][8] = 0;
  _$jscoverage['test/argo_test.js'][10] = 0;
  _$jscoverage['test/argo_test.js'][11] = 0;
  _$jscoverage['test/argo_test.js'][12] = 0;
  _$jscoverage['test/argo_test.js'][13] = 0;
  _$jscoverage['test/argo_test.js'][15] = 0;
  _$jscoverage['test/argo_test.js'][17] = 0;
  _$jscoverage['test/argo_test.js'][18] = 0;
  _$jscoverage['test/argo_test.js'][19] = 0;
  _$jscoverage['test/argo_test.js'][22] = 0;
  _$jscoverage['test/argo_test.js'][23] = 0;
  _$jscoverage['test/argo_test.js'][24] = 0;
  _$jscoverage['test/argo_test.js'][27] = 0;
  _$jscoverage['test/argo_test.js'][28] = 0;
  _$jscoverage['test/argo_test.js'][29] = 0;
  _$jscoverage['test/argo_test.js'][30] = 0;
  _$jscoverage['test/argo_test.js'][31] = 0;
  _$jscoverage['test/argo_test.js'][32] = 0;
  _$jscoverage['test/argo_test.js'][34] = 0;
  _$jscoverage['test/argo_test.js'][36] = 0;
  _$jscoverage['test/argo_test.js'][37] = 0;
  _$jscoverage['test/argo_test.js'][38] = 0;
  _$jscoverage['test/argo_test.js'][41] = 0;
  _$jscoverage['test/argo_test.js'][42] = 0;
  _$jscoverage['test/argo_test.js'][43] = 0;
  _$jscoverage['test/argo_test.js'][46] = 0;
  _$jscoverage['test/argo_test.js'][47] = 0;
  _$jscoverage['test/argo_test.js'][50] = 0;
  _$jscoverage['test/argo_test.js'][51] = 0;
  _$jscoverage['test/argo_test.js'][52] = 0;
  _$jscoverage['test/argo_test.js'][55] = 0;
  _$jscoverage['test/argo_test.js'][56] = 0;
  _$jscoverage['test/argo_test.js'][59] = 0;
  _$jscoverage['test/argo_test.js'][60] = 0;
  _$jscoverage['test/argo_test.js'][63] = 0;
  _$jscoverage['test/argo_test.js'][64] = 0;
  _$jscoverage['test/argo_test.js'][72] = 0;
  _$jscoverage['test/argo_test.js'][73] = 0;
  _$jscoverage['test/argo_test.js'][74] = 0;
  _$jscoverage['test/argo_test.js'][75] = 0;
  _$jscoverage['test/argo_test.js'][76] = 0;
  _$jscoverage['test/argo_test.js'][80] = 0;
  _$jscoverage['test/argo_test.js'][81] = 0;
  _$jscoverage['test/argo_test.js'][82] = 0;
  _$jscoverage['test/argo_test.js'][84] = 0;
  _$jscoverage['test/argo_test.js'][86] = 0;
  _$jscoverage['test/argo_test.js'][92] = 0;
  _$jscoverage['test/argo_test.js'][94] = 0;
  _$jscoverage['test/argo_test.js'][98] = 0;
  _$jscoverage['test/argo_test.js'][99] = 0;
  _$jscoverage['test/argo_test.js'][100] = 0;
  _$jscoverage['test/argo_test.js'][101] = 0;
  _$jscoverage['test/argo_test.js'][102] = 0;
  _$jscoverage['test/argo_test.js'][105] = 0;
  _$jscoverage['test/argo_test.js'][106] = 0;
  _$jscoverage['test/argo_test.js'][107] = 0;
  _$jscoverage['test/argo_test.js'][110] = 0;
  _$jscoverage['test/argo_test.js'][111] = 0;
  _$jscoverage['test/argo_test.js'][112] = 0;
  _$jscoverage['test/argo_test.js'][113] = 0;
  _$jscoverage['test/argo_test.js'][115] = 0;
  _$jscoverage['test/argo_test.js'][119] = 0;
  _$jscoverage['test/argo_test.js'][120] = 0;
  _$jscoverage['test/argo_test.js'][121] = 0;
  _$jscoverage['test/argo_test.js'][122] = 0;
  _$jscoverage['test/argo_test.js'][123] = 0;
  _$jscoverage['test/argo_test.js'][124] = 0;
  _$jscoverage['test/argo_test.js'][126] = 0;
  _$jscoverage['test/argo_test.js'][127] = 0;
  _$jscoverage['test/argo_test.js'][128] = 0;
  _$jscoverage['test/argo_test.js'][132] = 0;
  _$jscoverage['test/argo_test.js'][133] = 0;
  _$jscoverage['test/argo_test.js'][134] = 0;
  _$jscoverage['test/argo_test.js'][137] = 0;
  _$jscoverage['test/argo_test.js'][140] = 0;
  _$jscoverage['test/argo_test.js'][141] = 0;
  _$jscoverage['test/argo_test.js'][142] = 0;
  _$jscoverage['test/argo_test.js'][143] = 0;
  _$jscoverage['test/argo_test.js'][145] = 0;
  _$jscoverage['test/argo_test.js'][146] = 0;
  _$jscoverage['test/argo_test.js'][147] = 0;
  _$jscoverage['test/argo_test.js'][150] = 0;
  _$jscoverage['test/argo_test.js'][152] = 0;
  _$jscoverage['test/argo_test.js'][154] = 0;
  _$jscoverage['test/argo_test.js'][157] = 0;
  _$jscoverage['test/argo_test.js'][158] = 0;
  _$jscoverage['test/argo_test.js'][159] = 0;
  _$jscoverage['test/argo_test.js'][161] = 0;
  _$jscoverage['test/argo_test.js'][162] = 0;
  _$jscoverage['test/argo_test.js'][163] = 0;
  _$jscoverage['test/argo_test.js'][167] = 0;
  _$jscoverage['test/argo_test.js'][169] = 0;
  _$jscoverage['test/argo_test.js'][172] = 0;
  _$jscoverage['test/argo_test.js'][173] = 0;
  _$jscoverage['test/argo_test.js'][174] = 0;
  _$jscoverage['test/argo_test.js'][175] = 0;
  _$jscoverage['test/argo_test.js'][178] = 0;
  _$jscoverage['test/argo_test.js'][179] = 0;
  _$jscoverage['test/argo_test.js'][182] = 0;
  _$jscoverage['test/argo_test.js'][183] = 0;
  _$jscoverage['test/argo_test.js'][184] = 0;
  _$jscoverage['test/argo_test.js'][185] = 0;
  _$jscoverage['test/argo_test.js'][188] = 0;
  _$jscoverage['test/argo_test.js'][189] = 0;
  _$jscoverage['test/argo_test.js'][190] = 0;
  _$jscoverage['test/argo_test.js'][193] = 0;
  _$jscoverage['test/argo_test.js'][194] = 0;
  _$jscoverage['test/argo_test.js'][195] = 0;
  _$jscoverage['test/argo_test.js'][197] = 0;
  _$jscoverage['test/argo_test.js'][198] = 0;
  _$jscoverage['test/argo_test.js'][199] = 0;
  _$jscoverage['test/argo_test.js'][203] = 0;
  _$jscoverage['test/argo_test.js'][205] = 0;
  _$jscoverage['test/argo_test.js'][209] = 0;
  _$jscoverage['test/argo_test.js'][210] = 0;
  _$jscoverage['test/argo_test.js'][211] = 0;
  _$jscoverage['test/argo_test.js'][212] = 0;
  _$jscoverage['test/argo_test.js'][214] = 0;
  _$jscoverage['test/argo_test.js'][215] = 0;
  _$jscoverage['test/argo_test.js'][216] = 0;
  _$jscoverage['test/argo_test.js'][219] = 0;
  _$jscoverage['test/argo_test.js'][221] = 0;
  _$jscoverage['test/argo_test.js'][223] = 0;
  _$jscoverage['test/argo_test.js'][228] = 0;
  _$jscoverage['test/argo_test.js'][229] = 0;
  _$jscoverage['test/argo_test.js'][230] = 0;
  _$jscoverage['test/argo_test.js'][233] = 0;
  _$jscoverage['test/argo_test.js'][234] = 0;
  _$jscoverage['test/argo_test.js'][235] = 0;
  _$jscoverage['test/argo_test.js'][243] = 0;
  _$jscoverage['test/argo_test.js'][244] = 0;
  _$jscoverage['test/argo_test.js'][245] = 0;
  _$jscoverage['test/argo_test.js'][246] = 0;
  _$jscoverage['test/argo_test.js'][247] = 0;
  _$jscoverage['test/argo_test.js'][248] = 0;
  _$jscoverage['test/argo_test.js'][250] = 0;
  _$jscoverage['test/argo_test.js'][251] = 0;
  _$jscoverage['test/argo_test.js'][252] = 0;
  _$jscoverage['test/argo_test.js'][258] = 0;
  _$jscoverage['test/argo_test.js'][259] = 0;
  _$jscoverage['test/argo_test.js'][260] = 0;
  _$jscoverage['test/argo_test.js'][261] = 0;
  _$jscoverage['test/argo_test.js'][263] = 0;
  _$jscoverage['test/argo_test.js'][265] = 0;
  _$jscoverage['test/argo_test.js'][266] = 0;
  _$jscoverage['test/argo_test.js'][267] = 0;
  _$jscoverage['test/argo_test.js'][273] = 0;
  _$jscoverage['test/argo_test.js'][274] = 0;
  _$jscoverage['test/argo_test.js'][275] = 0;
  _$jscoverage['test/argo_test.js'][276] = 0;
  _$jscoverage['test/argo_test.js'][278] = 0;
  _$jscoverage['test/argo_test.js'][280] = 0;
  _$jscoverage['test/argo_test.js'][281] = 0;
  _$jscoverage['test/argo_test.js'][282] = 0;
  _$jscoverage['test/argo_test.js'][290] = 0;
  _$jscoverage['test/argo_test.js'][291] = 0;
  _$jscoverage['test/argo_test.js'][292] = 0;
  _$jscoverage['test/argo_test.js'][293] = 0;
  _$jscoverage['test/argo_test.js'][295] = 0;
  _$jscoverage['test/argo_test.js'][298] = 0;
  _$jscoverage['test/argo_test.js'][299] = 0;
  _$jscoverage['test/argo_test.js'][304] = 0;
  _$jscoverage['test/argo_test.js'][305] = 0;
  _$jscoverage['test/argo_test.js'][306] = 0;
  _$jscoverage['test/argo_test.js'][307] = 0;
  _$jscoverage['test/argo_test.js'][309] = 0;
  _$jscoverage['test/argo_test.js'][311] = 0;
  _$jscoverage['test/argo_test.js'][312] = 0;
  _$jscoverage['test/argo_test.js'][313] = 0;
  _$jscoverage['test/argo_test.js'][320] = 0;
  _$jscoverage['test/argo_test.js'][321] = 0;
  _$jscoverage['test/argo_test.js'][322] = 0;
  _$jscoverage['test/argo_test.js'][323] = 0;
  _$jscoverage['test/argo_test.js'][325] = 0;
  _$jscoverage['test/argo_test.js'][328] = 0;
  _$jscoverage['test/argo_test.js'][329] = 0;
  _$jscoverage['test/argo_test.js'][330] = 0;
  _$jscoverage['test/argo_test.js'][336] = 0;
  _$jscoverage['test/argo_test.js'][337] = 0;
  _$jscoverage['test/argo_test.js'][338] = 0;
  _$jscoverage['test/argo_test.js'][339] = 0;
  _$jscoverage['test/argo_test.js'][341] = 0;
  _$jscoverage['test/argo_test.js'][343] = 0;
  _$jscoverage['test/argo_test.js'][344] = 0;
  _$jscoverage['test/argo_test.js'][345] = 0;
  _$jscoverage['test/argo_test.js'][352] = 0;
  _$jscoverage['test/argo_test.js'][353] = 0;
  _$jscoverage['test/argo_test.js'][354] = 0;
  _$jscoverage['test/argo_test.js'][355] = 0;
  _$jscoverage['test/argo_test.js'][357] = 0;
  _$jscoverage['test/argo_test.js'][359] = 0;
  _$jscoverage['test/argo_test.js'][360] = 0;
  _$jscoverage['test/argo_test.js'][361] = 0;
  _$jscoverage['test/argo_test.js'][368] = 0;
  _$jscoverage['test/argo_test.js'][369] = 0;
  _$jscoverage['test/argo_test.js'][370] = 0;
  _$jscoverage['test/argo_test.js'][371] = 0;
  _$jscoverage['test/argo_test.js'][373] = 0;
  _$jscoverage['test/argo_test.js'][375] = 0;
  _$jscoverage['test/argo_test.js'][376] = 0;
  _$jscoverage['test/argo_test.js'][377] = 0;
  _$jscoverage['test/argo_test.js'][381] = 0;
  _$jscoverage['test/argo_test.js'][382] = 0;
  _$jscoverage['test/argo_test.js'][383] = 0;
  _$jscoverage['test/argo_test.js'][390] = 0;
  _$jscoverage['test/argo_test.js'][391] = 0;
  _$jscoverage['test/argo_test.js'][392] = 0;
  _$jscoverage['test/argo_test.js'][393] = 0;
  _$jscoverage['test/argo_test.js'][394] = 0;
  _$jscoverage['test/argo_test.js'][395] = 0;
  _$jscoverage['test/argo_test.js'][397] = 0;
  _$jscoverage['test/argo_test.js'][399] = 0;
  _$jscoverage['test/argo_test.js'][401] = 0;
  _$jscoverage['test/argo_test.js'][402] = 0;
  _$jscoverage['test/argo_test.js'][403] = 0;
  _$jscoverage['test/argo_test.js'][404] = 0;
  _$jscoverage['test/argo_test.js'][405] = 0;
  _$jscoverage['test/argo_test.js'][412] = 0;
  _$jscoverage['test/argo_test.js'][413] = 0;
  _$jscoverage['test/argo_test.js'][414] = 0;
  _$jscoverage['test/argo_test.js'][415] = 0;
  _$jscoverage['test/argo_test.js'][417] = 0;
  _$jscoverage['test/argo_test.js'][419] = 0;
  _$jscoverage['test/argo_test.js'][421] = 0;
  _$jscoverage['test/argo_test.js'][422] = 0;
  _$jscoverage['test/argo_test.js'][423] = 0;
  _$jscoverage['test/argo_test.js'][424] = 0;
  _$jscoverage['test/argo_test.js'][425] = 0;
  _$jscoverage['test/argo_test.js'][426] = 0;
  _$jscoverage['test/argo_test.js'][434] = 0;
  _$jscoverage['test/argo_test.js'][435] = 0;
  _$jscoverage['test/argo_test.js'][436] = 0;
  _$jscoverage['test/argo_test.js'][437] = 0;
  _$jscoverage['test/argo_test.js'][439] = 0;
  _$jscoverage['test/argo_test.js'][441] = 0;
  _$jscoverage['test/argo_test.js'][443] = 0;
  _$jscoverage['test/argo_test.js'][444] = 0;
  _$jscoverage['test/argo_test.js'][445] = 0;
  _$jscoverage['test/argo_test.js'][446] = 0;
  _$jscoverage['test/argo_test.js'][447] = 0;
  _$jscoverage['test/argo_test.js'][456] = 0;
  _$jscoverage['test/argo_test.js'][457] = 0;
  _$jscoverage['test/argo_test.js'][458] = 0;
  _$jscoverage['test/argo_test.js'][459] = 0;
  _$jscoverage['test/argo_test.js'][460] = 0;
  _$jscoverage['test/argo_test.js'][461] = 0;
  _$jscoverage['test/argo_test.js'][463] = 0;
  _$jscoverage['test/argo_test.js'][464] = 0;
  _$jscoverage['test/argo_test.js'][465] = 0;
  _$jscoverage['test/argo_test.js'][466] = 0;
  _$jscoverage['test/argo_test.js'][468] = 0;
  _$jscoverage['test/argo_test.js'][470] = 0;
  _$jscoverage['test/argo_test.js'][471] = 0;
  _$jscoverage['test/argo_test.js'][472] = 0;
  _$jscoverage['test/argo_test.js'][473] = 0;
  _$jscoverage['test/argo_test.js'][479] = 0;
  _$jscoverage['test/argo_test.js'][480] = 0;
  _$jscoverage['test/argo_test.js'][483] = 0;
  _$jscoverage['test/argo_test.js'][484] = 0;
  _$jscoverage['test/argo_test.js'][485] = 0;
  _$jscoverage['test/argo_test.js'][486] = 0;
  _$jscoverage['test/argo_test.js'][487] = 0;
  _$jscoverage['test/argo_test.js'][489] = 0;
  _$jscoverage['test/argo_test.js'][490] = 0;
  _$jscoverage['test/argo_test.js'][491] = 0;
  _$jscoverage['test/argo_test.js'][492] = 0;
  _$jscoverage['test/argo_test.js'][494] = 0;
  _$jscoverage['test/argo_test.js'][496] = 0;
  _$jscoverage['test/argo_test.js'][497] = 0;
  _$jscoverage['test/argo_test.js'][498] = 0;
  _$jscoverage['test/argo_test.js'][499] = 0;
  _$jscoverage['test/argo_test.js'][500] = 0;
  _$jscoverage['test/argo_test.js'][506] = 0;
  _$jscoverage['test/argo_test.js'][507] = 0;
  _$jscoverage['test/argo_test.js'][508] = 0;
  _$jscoverage['test/argo_test.js'][509] = 0;
  _$jscoverage['test/argo_test.js'][511] = 0;
  _$jscoverage['test/argo_test.js'][514] = 0;
  _$jscoverage['test/argo_test.js'][515] = 0;
  _$jscoverage['test/argo_test.js'][516] = 0;
  _$jscoverage['test/argo_test.js'][517] = 0;
  _$jscoverage['test/argo_test.js'][518] = 0;
  _$jscoverage['test/argo_test.js'][520] = 0;
  _$jscoverage['test/argo_test.js'][521] = 0;
  _$jscoverage['test/argo_test.js'][522] = 0;
  _$jscoverage['test/argo_test.js'][523] = 0;
  _$jscoverage['test/argo_test.js'][525] = 0;
  _$jscoverage['test/argo_test.js'][527] = 0;
  _$jscoverage['test/argo_test.js'][528] = 0;
  _$jscoverage['test/argo_test.js'][529] = 0;
  _$jscoverage['test/argo_test.js'][530] = 0;
  _$jscoverage['test/argo_test.js'][535] = 0;
  _$jscoverage['test/argo_test.js'][536] = 0;
  _$jscoverage['test/argo_test.js'][537] = 0;
  _$jscoverage['test/argo_test.js'][538] = 0;
  _$jscoverage['test/argo_test.js'][540] = 0;
  _$jscoverage['test/argo_test.js'][542] = 0;
  _$jscoverage['test/argo_test.js'][543] = 0;
  _$jscoverage['test/argo_test.js'][544] = 0;
  _$jscoverage['test/argo_test.js'][545] = 0;
  _$jscoverage['test/argo_test.js'][547] = 0;
  _$jscoverage['test/argo_test.js'][548] = 0;
  _$jscoverage['test/argo_test.js'][549] = 0;
  _$jscoverage['test/argo_test.js'][550] = 0;
  _$jscoverage['test/argo_test.js'][552] = 0;
  _$jscoverage['test/argo_test.js'][554] = 0;
  _$jscoverage['test/argo_test.js'][555] = 0;
  _$jscoverage['test/argo_test.js'][556] = 0;
  _$jscoverage['test/argo_test.js'][557] = 0;
  _$jscoverage['test/argo_test.js'][562] = 0;
  _$jscoverage['test/argo_test.js'][563] = 0;
  _$jscoverage['test/argo_test.js'][564] = 0;
  _$jscoverage['test/argo_test.js'][565] = 0;
  _$jscoverage['test/argo_test.js'][567] = 0;
  _$jscoverage['test/argo_test.js'][571] = 0;
  _$jscoverage['test/argo_test.js'][572] = 0;
  _$jscoverage['test/argo_test.js'][573] = 0;
  _$jscoverage['test/argo_test.js'][574] = 0;
  _$jscoverage['test/argo_test.js'][576] = 0;
  _$jscoverage['test/argo_test.js'][577] = 0;
  _$jscoverage['test/argo_test.js'][578] = 0;
  _$jscoverage['test/argo_test.js'][579] = 0;
  _$jscoverage['test/argo_test.js'][581] = 0;
  _$jscoverage['test/argo_test.js'][583] = 0;
  _$jscoverage['test/argo_test.js'][584] = 0;
  _$jscoverage['test/argo_test.js'][585] = 0;
  _$jscoverage['test/argo_test.js'][586] = 0;
  _$jscoverage['test/argo_test.js'][591] = 0;
  _$jscoverage['test/argo_test.js'][592] = 0;
  _$jscoverage['test/argo_test.js'][593] = 0;
  _$jscoverage['test/argo_test.js'][594] = 0;
  _$jscoverage['test/argo_test.js'][596] = 0;
  _$jscoverage['test/argo_test.js'][601] = 0;
  _$jscoverage['test/argo_test.js'][602] = 0;
  _$jscoverage['test/argo_test.js'][603] = 0;
  _$jscoverage['test/argo_test.js'][604] = 0;
  _$jscoverage['test/argo_test.js'][605] = 0;
  _$jscoverage['test/argo_test.js'][607] = 0;
  _$jscoverage['test/argo_test.js'][608] = 0;
  _$jscoverage['test/argo_test.js'][609] = 0;
  _$jscoverage['test/argo_test.js'][610] = 0;
  _$jscoverage['test/argo_test.js'][612] = 0;
  _$jscoverage['test/argo_test.js'][614] = 0;
  _$jscoverage['test/argo_test.js'][615] = 0;
  _$jscoverage['test/argo_test.js'][616] = 0;
  _$jscoverage['test/argo_test.js'][617] = 0;
  _$jscoverage['test/argo_test.js'][622] = 0;
  _$jscoverage['test/argo_test.js'][623] = 0;
  _$jscoverage['test/argo_test.js'][624] = 0;
  _$jscoverage['test/argo_test.js'][625] = 0;
  _$jscoverage['test/argo_test.js'][627] = 0;
  _$jscoverage['test/argo_test.js'][630] = 0;
  _$jscoverage['test/argo_test.js'][631] = 0;
  _$jscoverage['test/argo_test.js'][632] = 0;
  _$jscoverage['test/argo_test.js'][633] = 0;
  _$jscoverage['test/argo_test.js'][634] = 0;
  _$jscoverage['test/argo_test.js'][636] = 0;
  _$jscoverage['test/argo_test.js'][637] = 0;
  _$jscoverage['test/argo_test.js'][638] = 0;
  _$jscoverage['test/argo_test.js'][639] = 0;
  _$jscoverage['test/argo_test.js'][641] = 0;
  _$jscoverage['test/argo_test.js'][643] = 0;
  _$jscoverage['test/argo_test.js'][644] = 0;
  _$jscoverage['test/argo_test.js'][645] = 0;
  _$jscoverage['test/argo_test.js'][646] = 0;
  _$jscoverage['test/argo_test.js'][651] = 0;
  _$jscoverage['test/argo_test.js'][652] = 0;
  _$jscoverage['test/argo_test.js'][653] = 0;
  _$jscoverage['test/argo_test.js'][654] = 0;
  _$jscoverage['test/argo_test.js'][656] = 0;
  _$jscoverage['test/argo_test.js'][660] = 0;
  _$jscoverage['test/argo_test.js'][661] = 0;
  _$jscoverage['test/argo_test.js'][662] = 0;
  _$jscoverage['test/argo_test.js'][663] = 0;
  _$jscoverage['test/argo_test.js'][664] = 0;
  _$jscoverage['test/argo_test.js'][666] = 0;
  _$jscoverage['test/argo_test.js'][667] = 0;
  _$jscoverage['test/argo_test.js'][668] = 0;
  _$jscoverage['test/argo_test.js'][669] = 0;
  _$jscoverage['test/argo_test.js'][671] = 0;
  _$jscoverage['test/argo_test.js'][673] = 0;
  _$jscoverage['test/argo_test.js'][674] = 0;
  _$jscoverage['test/argo_test.js'][675] = 0;
  _$jscoverage['test/argo_test.js'][676] = 0;
  _$jscoverage['test/argo_test.js'][681] = 0;
  _$jscoverage['test/argo_test.js'][682] = 0;
  _$jscoverage['test/argo_test.js'][683] = 0;
  _$jscoverage['test/argo_test.js'][684] = 0;
  _$jscoverage['test/argo_test.js'][686] = 0;
  _$jscoverage['test/argo_test.js'][691] = 0;
  _$jscoverage['test/argo_test.js'][692] = 0;
  _$jscoverage['test/argo_test.js'][693] = 0;
  _$jscoverage['test/argo_test.js'][694] = 0;
  _$jscoverage['test/argo_test.js'][695] = 0;
  _$jscoverage['test/argo_test.js'][696] = 0;
  _$jscoverage['test/argo_test.js'][697] = 0;
  _$jscoverage['test/argo_test.js'][698] = 0;
  _$jscoverage['test/argo_test.js'][699] = 0;
  _$jscoverage['test/argo_test.js'][702] = 0;
  _$jscoverage['test/argo_test.js'][703] = 0;
  _$jscoverage['test/argo_test.js'][704] = 0;
  _$jscoverage['test/argo_test.js'][705] = 0;
  _$jscoverage['test/argo_test.js'][708] = 0;
  _$jscoverage['test/argo_test.js'][710] = 0;
  _$jscoverage['test/argo_test.js'][711] = 0;
  _$jscoverage['test/argo_test.js'][713] = 0;
  _$jscoverage['test/argo_test.js'][717] = 0;
  _$jscoverage['test/argo_test.js'][718] = 0;
  _$jscoverage['test/argo_test.js'][719] = 0;
  _$jscoverage['test/argo_test.js'][720] = 0;
  _$jscoverage['test/argo_test.js'][721] = 0;
  _$jscoverage['test/argo_test.js'][723] = 0;
  _$jscoverage['test/argo_test.js'][725] = 0;
  _$jscoverage['test/argo_test.js'][726] = 0;
  _$jscoverage['test/argo_test.js'][727] = 0;
  _$jscoverage['test/argo_test.js'][734] = 0;
  _$jscoverage['test/argo_test.js'][735] = 0;
  _$jscoverage['test/argo_test.js'][736] = 0;
  _$jscoverage['test/argo_test.js'][737] = 0;
  _$jscoverage['test/argo_test.js'][738] = 0;
  _$jscoverage['test/argo_test.js'][740] = 0;
  _$jscoverage['test/argo_test.js'][742] = 0;
  _$jscoverage['test/argo_test.js'][743] = 0;
  _$jscoverage['test/argo_test.js'][744] = 0;
  _$jscoverage['test/argo_test.js'][751] = 0;
  _$jscoverage['test/argo_test.js'][752] = 0;
  _$jscoverage['test/argo_test.js'][753] = 0;
  _$jscoverage['test/argo_test.js'][754] = 0;
  _$jscoverage['test/argo_test.js'][755] = 0;
  _$jscoverage['test/argo_test.js'][757] = 0;
  _$jscoverage['test/argo_test.js'][759] = 0;
  _$jscoverage['test/argo_test.js'][760] = 0;
  _$jscoverage['test/argo_test.js'][761] = 0;
  _$jscoverage['test/argo_test.js'][768] = 0;
  _$jscoverage['test/argo_test.js'][769] = 0;
  _$jscoverage['test/argo_test.js'][770] = 0;
  _$jscoverage['test/argo_test.js'][771] = 0;
  _$jscoverage['test/argo_test.js'][772] = 0;
  _$jscoverage['test/argo_test.js'][774] = 0;
  _$jscoverage['test/argo_test.js'][776] = 0;
  _$jscoverage['test/argo_test.js'][777] = 0;
  _$jscoverage['test/argo_test.js'][778] = 0;
  _$jscoverage['test/argo_test.js'][785] = 0;
  _$jscoverage['test/argo_test.js'][786] = 0;
  _$jscoverage['test/argo_test.js'][787] = 0;
  _$jscoverage['test/argo_test.js'][788] = 0;
  _$jscoverage['test/argo_test.js'][789] = 0;
  _$jscoverage['test/argo_test.js'][791] = 0;
  _$jscoverage['test/argo_test.js'][793] = 0;
  _$jscoverage['test/argo_test.js'][794] = 0;
  _$jscoverage['test/argo_test.js'][795] = 0;
  _$jscoverage['test/argo_test.js'][802] = 0;
  _$jscoverage['test/argo_test.js'][803] = 0;
  _$jscoverage['test/argo_test.js'][804] = 0;
  _$jscoverage['test/argo_test.js'][805] = 0;
  _$jscoverage['test/argo_test.js'][806] = 0;
  _$jscoverage['test/argo_test.js'][808] = 0;
  _$jscoverage['test/argo_test.js'][810] = 0;
  _$jscoverage['test/argo_test.js'][811] = 0;
  _$jscoverage['test/argo_test.js'][812] = 0;
  _$jscoverage['test/argo_test.js'][820] = 0;
  _$jscoverage['test/argo_test.js'][821] = 0;
  _$jscoverage['test/argo_test.js'][822] = 0;
  _$jscoverage['test/argo_test.js'][823] = 0;
  _$jscoverage['test/argo_test.js'][824] = 0;
  _$jscoverage['test/argo_test.js'][826] = 0;
  _$jscoverage['test/argo_test.js'][828] = 0;
  _$jscoverage['test/argo_test.js'][829] = 0;
  _$jscoverage['test/argo_test.js'][830] = 0;
  _$jscoverage['test/argo_test.js'][837] = 0;
  _$jscoverage['test/argo_test.js'][838] = 0;
  _$jscoverage['test/argo_test.js'][839] = 0;
  _$jscoverage['test/argo_test.js'][841] = 0;
  _$jscoverage['test/argo_test.js'][842] = 0;
  _$jscoverage['test/argo_test.js'][843] = 0;
  _$jscoverage['test/argo_test.js'][848] = 0;
  _$jscoverage['test/argo_test.js'][849] = 0;
  _$jscoverage['test/argo_test.js'][851] = 0;
  _$jscoverage['test/argo_test.js'][855] = 0;
  _$jscoverage['test/argo_test.js'][856] = 0;
  _$jscoverage['test/argo_test.js'][857] = 0;
  _$jscoverage['test/argo_test.js'][858] = 0;
  _$jscoverage['test/argo_test.js'][859] = 0;
  _$jscoverage['test/argo_test.js'][860] = 0;
  _$jscoverage['test/argo_test.js'][861] = 0;
  _$jscoverage['test/argo_test.js'][862] = 0;
  _$jscoverage['test/argo_test.js'][865] = 0;
  _$jscoverage['test/argo_test.js'][871] = 0;
  _$jscoverage['test/argo_test.js'][872] = 0;
  _$jscoverage['test/argo_test.js'][873] = 0;
  _$jscoverage['test/argo_test.js'][874] = 0;
  _$jscoverage['test/argo_test.js'][875] = 0;
  _$jscoverage['test/argo_test.js'][876] = 0;
  _$jscoverage['test/argo_test.js'][878] = 0;
  _$jscoverage['test/argo_test.js'][879] = 0;
  _$jscoverage['test/argo_test.js'][880] = 0;
  _$jscoverage['test/argo_test.js'][881] = 0;
  _$jscoverage['test/argo_test.js'][883] = 0;
  _$jscoverage['test/argo_test.js'][885] = 0;
  _$jscoverage['test/argo_test.js'][886] = 0;
  _$jscoverage['test/argo_test.js'][887] = 0;
  _$jscoverage['test/argo_test.js'][894] = 0;
  _$jscoverage['test/argo_test.js'][895] = 0;
  _$jscoverage['test/argo_test.js'][896] = 0;
  _$jscoverage['test/argo_test.js'][897] = 0;
  _$jscoverage['test/argo_test.js'][899] = 0;
  _$jscoverage['test/argo_test.js'][900] = 0;
  _$jscoverage['test/argo_test.js'][901] = 0;
  _$jscoverage['test/argo_test.js'][902] = 0;
  _$jscoverage['test/argo_test.js'][903] = 0;
  _$jscoverage['test/argo_test.js'][904] = 0;
  _$jscoverage['test/argo_test.js'][905] = 0;
  _$jscoverage['test/argo_test.js'][906] = 0;
  _$jscoverage['test/argo_test.js'][907] = 0;
  _$jscoverage['test/argo_test.js'][908] = 0;
  _$jscoverage['test/argo_test.js'][910] = 0;
  _$jscoverage['test/argo_test.js'][912] = 0;
  _$jscoverage['test/argo_test.js'][913] = 0;
  _$jscoverage['test/argo_test.js'][920] = 0;
  _$jscoverage['test/argo_test.js'][923] = 0;
  _$jscoverage['test/argo_test.js'][924] = 0;
  _$jscoverage['test/argo_test.js'][926] = 0;
  _$jscoverage['test/argo_test.js'][930] = 0;
  _$jscoverage['test/argo_test.js'][931] = 0;
  _$jscoverage['test/argo_test.js'][932] = 0;
  _$jscoverage['test/argo_test.js'][933] = 0;
  _$jscoverage['test/argo_test.js'][935] = 0;
  _$jscoverage['test/argo_test.js'][937] = 0;
  _$jscoverage['test/argo_test.js'][938] = 0;
  _$jscoverage['test/argo_test.js'][939] = 0;
  _$jscoverage['test/argo_test.js'][940] = 0;
  _$jscoverage['test/argo_test.js'][941] = 0;
  _$jscoverage['test/argo_test.js'][942] = 0;
  _$jscoverage['test/argo_test.js'][943] = 0;
  _$jscoverage['test/argo_test.js'][944] = 0;
  _$jscoverage['test/argo_test.js'][945] = 0;
  _$jscoverage['test/argo_test.js'][952] = 0;
  _$jscoverage['test/argo_test.js'][954] = 0;
  _$jscoverage['test/argo_test.js'][955] = 0;
  _$jscoverage['test/argo_test.js'][956] = 0;
  _$jscoverage['test/argo_test.js'][957] = 0;
  _$jscoverage['test/argo_test.js'][961] = 0;
  _$jscoverage['test/argo_test.js'][968] = 0;
  _$jscoverage['test/argo_test.js'][969] = 0;
  _$jscoverage['test/argo_test.js'][971] = 0;
  _$jscoverage['test/argo_test.js'][972] = 0;
  _$jscoverage['test/argo_test.js'][973] = 0;
  _$jscoverage['test/argo_test.js'][974] = 0;
  _$jscoverage['test/argo_test.js'][975] = 0;
  _$jscoverage['test/argo_test.js'][978] = 0;
  _$jscoverage['test/argo_test.js'][980] = 0;
  _$jscoverage['test/argo_test.js'][981] = 0;
  _$jscoverage['test/argo_test.js'][982] = 0;
  _$jscoverage['test/argo_test.js'][983] = 0;
  _$jscoverage['test/argo_test.js'][984] = 0;
  _$jscoverage['test/argo_test.js'][985] = 0;
  _$jscoverage['test/argo_test.js'][986] = 0;
  _$jscoverage['test/argo_test.js'][987] = 0;
  _$jscoverage['test/argo_test.js'][988] = 0;
  _$jscoverage['test/argo_test.js'][989] = 0;
  _$jscoverage['test/argo_test.js'][992] = 0;
  _$jscoverage['test/argo_test.js'][997] = 0;
  _$jscoverage['test/argo_test.js'][998] = 0;
  _$jscoverage['test/argo_test.js'][1000] = 0;
  _$jscoverage['test/argo_test.js'][1001] = 0;
  _$jscoverage['test/argo_test.js'][1002] = 0;
  _$jscoverage['test/argo_test.js'][1004] = 0;
  _$jscoverage['test/argo_test.js'][1005] = 0;
  _$jscoverage['test/argo_test.js'][1006] = 0;
  _$jscoverage['test/argo_test.js'][1007] = 0;
  _$jscoverage['test/argo_test.js'][1008] = 0;
  _$jscoverage['test/argo_test.js'][1009] = 0;
  _$jscoverage['test/argo_test.js'][1010] = 0;
  _$jscoverage['test/argo_test.js'][1011] = 0;
  _$jscoverage['test/argo_test.js'][1014] = 0;
  _$jscoverage['test/argo_test.js'][1021] = 0;
  _$jscoverage['test/argo_test.js'][1023] = 0;
  _$jscoverage['test/argo_test.js'][1024] = 0;
  _$jscoverage['test/argo_test.js'][1025] = 0;
  _$jscoverage['test/argo_test.js'][1033] = 0;
  _$jscoverage['test/argo_test.js'][1034] = 0;
  _$jscoverage['test/argo_test.js'][1035] = 0;
  _$jscoverage['test/argo_test.js'][1036] = 0;
  _$jscoverage['test/argo_test.js'][1037] = 0;
  _$jscoverage['test/argo_test.js'][1038] = 0;
  _$jscoverage['test/argo_test.js'][1039] = 0;
  _$jscoverage['test/argo_test.js'][1041] = 0;
  _$jscoverage['test/argo_test.js'][1042] = 0;
  _$jscoverage['test/argo_test.js'][1043] = 0;
  _$jscoverage['test/argo_test.js'][1046] = 0;
  _$jscoverage['test/argo_test.js'][1047] = 0;
  _$jscoverage['test/argo_test.js'][1048] = 0;
  _$jscoverage['test/argo_test.js'][1051] = 0;
  _$jscoverage['test/argo_test.js'][1052] = 0;
  _$jscoverage['test/argo_test.js'][1054] = 0;
  _$jscoverage['test/argo_test.js'][1056] = 0;
  _$jscoverage['test/argo_test.js'][1057] = 0;
  _$jscoverage['test/argo_test.js'][1058] = 0;
  _$jscoverage['test/argo_test.js'][1059] = 0;
  _$jscoverage['test/argo_test.js'][1060] = 0;
  _$jscoverage['test/argo_test.js'][1065] = 0;
  _$jscoverage['test/argo_test.js'][1066] = 0;
  _$jscoverage['test/argo_test.js'][1069] = 0;
  _$jscoverage['test/argo_test.js'][1070] = 0;
  _$jscoverage['test/argo_test.js'][1071] = 0;
  _$jscoverage['test/argo_test.js'][1072] = 0;
  _$jscoverage['test/argo_test.js'][1073] = 0;
  _$jscoverage['test/argo_test.js'][1074] = 0;
  _$jscoverage['test/argo_test.js'][1076] = 0;
  _$jscoverage['test/argo_test.js'][1077] = 0;
  _$jscoverage['test/argo_test.js'][1078] = 0;
  _$jscoverage['test/argo_test.js'][1079] = 0;
  _$jscoverage['test/argo_test.js'][1082] = 0;
  _$jscoverage['test/argo_test.js'][1084] = 0;
  _$jscoverage['test/argo_test.js'][1085] = 0;
  _$jscoverage['test/argo_test.js'][1086] = 0;
  _$jscoverage['test/argo_test.js'][1087] = 0;
  _$jscoverage['test/argo_test.js'][1093] = 0;
  _$jscoverage['test/argo_test.js'][1094] = 0;
  _$jscoverage['test/argo_test.js'][1095] = 0;
  _$jscoverage['test/argo_test.js'][1096] = 0;
  _$jscoverage['test/argo_test.js'][1097] = 0;
  _$jscoverage['test/argo_test.js'][1098] = 0;
  _$jscoverage['test/argo_test.js'][1100] = 0;
  _$jscoverage['test/argo_test.js'][1101] = 0;
  _$jscoverage['test/argo_test.js'][1102] = 0;
  _$jscoverage['test/argo_test.js'][1105] = 0;
  _$jscoverage['test/argo_test.js'][1107] = 0;
  _$jscoverage['test/argo_test.js'][1108] = 0;
  _$jscoverage['test/argo_test.js'][1109] = 0;
  _$jscoverage['test/argo_test.js'][1110] = 0;
  _$jscoverage['test/argo_test.js'][1117] = 0;
  _$jscoverage['test/argo_test.js'][1118] = 0;
  _$jscoverage['test/argo_test.js'][1119] = 0;
  _$jscoverage['test/argo_test.js'][1120] = 0;
  _$jscoverage['test/argo_test.js'][1121] = 0;
  _$jscoverage['test/argo_test.js'][1122] = 0;
  _$jscoverage['test/argo_test.js'][1123] = 0;
  _$jscoverage['test/argo_test.js'][1125] = 0;
  _$jscoverage['test/argo_test.js'][1127] = 0;
  _$jscoverage['test/argo_test.js'][1128] = 0;
  _$jscoverage['test/argo_test.js'][1129] = 0;
  _$jscoverage['test/argo_test.js'][1133] = 0;
  _$jscoverage['test/argo_test.js'][1134] = 0;
  _$jscoverage['test/argo_test.js'][1135] = 0;
  _$jscoverage['test/argo_test.js'][1139] = 0;
  _$jscoverage['test/argo_test.js'][1140] = 0;
}
_$jscoverage['test/argo_test.js'][1]++;
var assert = require("assert");
_$jscoverage['test/argo_test.js'][2]++;
var EventEmitter = require("events").EventEmitter;
_$jscoverage['test/argo_test.js'][3]++;
var fs = require("fs");
_$jscoverage['test/argo_test.js'][4]++;
var http = require("http");
_$jscoverage['test/argo_test.js'][5]++;
var Stream = require("stream");
_$jscoverage['test/argo_test.js'][6]++;
var argo = require("../");
_$jscoverage['test/argo_test.js'][7]++;
var util = require("util");
_$jscoverage['test/argo_test.js'][8]++;
var Environment = require("../environment");
_$jscoverage['test/argo_test.js'][10]++;
function Request() {
  _$jscoverage['test/argo_test.js'][11]++;
  this.headers = {};
  _$jscoverage['test/argo_test.js'][12]++;
  this.chunks = [];
  _$jscoverage['test/argo_test.js'][13]++;
  Stream.Duplex.call(this);
}
_$jscoverage['test/argo_test.js'][15]++;
util.inherits(Request, Stream.Duplex);
_$jscoverage['test/argo_test.js'][17]++;
Request.prototype._read = (function (size) {
  _$jscoverage['test/argo_test.js'][18]++;
  var chunk = this.chunks.length? this.chunks.shift(): null;
  _$jscoverage['test/argo_test.js'][19]++;
  this.push(chunk);
});
_$jscoverage['test/argo_test.js'][22]++;
Request.prototype._write = (function (chunk, encoding, callback) {
  _$jscoverage['test/argo_test.js'][23]++;
  this.chunks.push(chunk);
  _$jscoverage['test/argo_test.js'][24]++;
  callback();
});
_$jscoverage['test/argo_test.js'][27]++;
function Response() {
  _$jscoverage['test/argo_test.js'][28]++;
  this.headers = {};
  _$jscoverage['test/argo_test.js'][29]++;
  this.statusCode = 0;
  _$jscoverage['test/argo_test.js'][30]++;
  this.body = null;
  _$jscoverage['test/argo_test.js'][31]++;
  this.chunks = [];
  _$jscoverage['test/argo_test.js'][32]++;
  Stream.Duplex.call(this);
}
_$jscoverage['test/argo_test.js'][34]++;
util.inherits(Response, Stream.Duplex);
_$jscoverage['test/argo_test.js'][36]++;
Response.prototype._read = (function (size) {
  _$jscoverage['test/argo_test.js'][37]++;
  var chunk = this.chunks.length? this.chunks.shift(): null;
  _$jscoverage['test/argo_test.js'][38]++;
  this.push(chunk);
});
_$jscoverage['test/argo_test.js'][41]++;
Response.prototype._write = (function (chunk, encoding, callback) {
  _$jscoverage['test/argo_test.js'][42]++;
  this.chunks.push(chunk);
  _$jscoverage['test/argo_test.js'][43]++;
  callback();
});
_$jscoverage['test/argo_test.js'][46]++;
Response.prototype.setHeader = (function (k, v) {
  _$jscoverage['test/argo_test.js'][47]++;
  this.headers[k] = v;
});
_$jscoverage['test/argo_test.js'][50]++;
Response.prototype.writeHead = (function (s, h) {
  _$jscoverage['test/argo_test.js'][51]++;
  this.statusCode = s;
  _$jscoverage['test/argo_test.js'][52]++;
  this.headers = h;
});
_$jscoverage['test/argo_test.js'][55]++;
Response.prototype.getHeader = (function (k) {
  _$jscoverage['test/argo_test.js'][56]++;
  return this.headers[k];
});
_$jscoverage['test/argo_test.js'][59]++;
Response.prototype.end = (function (b) {
  _$jscoverage['test/argo_test.js'][60]++;
  this.body = b;
});
_$jscoverage['test/argo_test.js'][63]++;
function _getEnv() {
  _$jscoverage['test/argo_test.js'][64]++;
  return ({request: new Request(), response: new Response(), target: {}, argo: {}});
}
_$jscoverage['test/argo_test.js'][72]++;
describe("Argo", (function () {
  _$jscoverage['test/argo_test.js'][73]++;
  describe("ctor", (function () {
  _$jscoverage['test/argo_test.js'][74]++;
  it("alters http.IncomingMessage.prototype", (function () {
  _$jscoverage['test/argo_test.js'][75]++;
  argo(http);
  _$jscoverage['test/argo_test.js'][76]++;
  assert.ok(http.IncomingMessage.prototype._argoModified);
}));
}));
  _$jscoverage['test/argo_test.js'][80]++;
  describe("#include", (function () {
  _$jscoverage['test/argo_test.js'][81]++;
  it("evaluates a package", (function () {
  _$jscoverage['test/argo_test.js'][82]++;
  var mixin = {package: (function (server) {
  _$jscoverage['test/argo_test.js'][84]++;
  return ({install: (function () {
  _$jscoverage['test/argo_test.js'][86]++;
  server.mixin = true;
})});
})};
  _$jscoverage['test/argo_test.js'][92]++;
  var server = argo().include(mixin);
  _$jscoverage['test/argo_test.js'][94]++;
  assert.ok(server.mixin);
}));
}));
  _$jscoverage['test/argo_test.js'][98]++;
  describe("#listen", (function () {
  _$jscoverage['test/argo_test.js'][99]++;
  it("calls http server listen", (function (done) {
  _$jscoverage['test/argo_test.js'][100]++;
  var Http = (function () {
});
  _$jscoverage['test/argo_test.js'][101]++;
  Http.prototype.createServer = (function () {
  _$jscoverage['test/argo_test.js'][102]++;
  return this;
});
  _$jscoverage['test/argo_test.js'][105]++;
  Http.prototype.listen = (function (port) {
  _$jscoverage['test/argo_test.js'][106]++;
  assert.equal(port, 1234);
  _$jscoverage['test/argo_test.js'][107]++;
  done();
});
  _$jscoverage['test/argo_test.js'][110]++;
  var _http = new Http();
  _$jscoverage['test/argo_test.js'][111]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][112]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][113]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][115]++;
  argo(_http).listen(1234);
}));
}));
  _$jscoverage['test/argo_test.js'][119]++;
  describe("#use", (function () {
  _$jscoverage['test/argo_test.js'][120]++;
  describe("argo execution pipeline", (function () {
  _$jscoverage['test/argo_test.js'][121]++;
  it("executes response handlers in reverse order", (function (done) {
  _$jscoverage['test/argo_test.js'][122]++;
  var server = argo();
  _$jscoverage['test/argo_test.js'][123]++;
  var wasCalled = false;
  _$jscoverage['test/argo_test.js'][124]++;
  server.use((function (handle) {
  _$jscoverage['test/argo_test.js'][126]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][127]++;
  assert.equal(true, wasCalled);
  _$jscoverage['test/argo_test.js'][128]++;
  done();
}));
})).use((function (handle) {
  _$jscoverage['test/argo_test.js'][132]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][133]++;
  wasCalled = true;
  _$jscoverage['test/argo_test.js'][134]++;
  next(env);
}));
}));
  _$jscoverage['test/argo_test.js'][137]++;
  server.call(_getEnv());
}));
}));
  _$jscoverage['test/argo_test.js'][140]++;
  describe("when using middleware", (function () {
  _$jscoverage['test/argo_test.js'][141]++;
  it("delegates to Builder#use", (function () {
  _$jscoverage['test/argo_test.js'][142]++;
  var server = argo();
  _$jscoverage['test/argo_test.js'][143]++;
  var wasCalled = false;
  _$jscoverage['test/argo_test.js'][145]++;
  var _use = server.builder.use;
  _$jscoverage['test/argo_test.js'][146]++;
  server.builder.use = (function (middleware) {
  _$jscoverage['test/argo_test.js'][147]++;
  wasCalled = true;
});
  _$jscoverage['test/argo_test.js'][150]++;
  server.builder.use((function (handle) {
}));
  _$jscoverage['test/argo_test.js'][152]++;
  server.builder.use = _use;
  _$jscoverage['test/argo_test.js'][154]++;
  assert.ok(wasCalled);
}));
  _$jscoverage['test/argo_test.js'][157]++;
  it("enqueues a middleware request handler", (function () {
  _$jscoverage['test/argo_test.js'][158]++;
  var server = argo();
  _$jscoverage['test/argo_test.js'][159]++;
  var wasCalled = false;
  _$jscoverage['test/argo_test.js'][161]++;
  server.use((function (handle) {
  _$jscoverage['test/argo_test.js'][162]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][163]++;
  wasCalled = true;
}));
}));
  _$jscoverage['test/argo_test.js'][167]++;
  server.call(_getEnv());
  _$jscoverage['test/argo_test.js'][169]++;
  assert.ok(wasCalled);
}));
  _$jscoverage['test/argo_test.js'][172]++;
  it("enqueues a custom event middleware", (function () {
  _$jscoverage['test/argo_test.js'][173]++;
  var server = argo();
  _$jscoverage['test/argo_test.js'][174]++;
  server.use((function (handle) {
  _$jscoverage['test/argo_test.js'][175]++;
  handle("custom", (function (env, next) {
}));
}));
  _$jscoverage['test/argo_test.js'][178]++;
  server.call(_getEnv());
  _$jscoverage['test/argo_test.js'][179]++;
  assert.ok("custom" in server.builder.pipelineMap);
}));
  _$jscoverage['test/argo_test.js'][182]++;
  it("can access custom pipelines using _pipeline", (function () {
  _$jscoverage['test/argo_test.js'][183]++;
  var server = argo();
  _$jscoverage['test/argo_test.js'][184]++;
  server.use((function (handle) {
  _$jscoverage['test/argo_test.js'][185]++;
  handle("custom", (function (env, next) {
}));
}));
  _$jscoverage['test/argo_test.js'][188]++;
  server.call(_getEnv());
  _$jscoverage['test/argo_test.js'][189]++;
  var pipe = server._pipeline("custom");
  _$jscoverage['test/argo_test.js'][190]++;
  assert.ok(typeof pipe !== "undefined");
}));
  _$jscoverage['test/argo_test.js'][193]++;
  it("enqueues a middleware response handler", (function () {
  _$jscoverage['test/argo_test.js'][194]++;
  var server = argo();
  _$jscoverage['test/argo_test.js'][195]++;
  var wasCalled = false;
  _$jscoverage['test/argo_test.js'][197]++;
  server.use((function (handle) {
  _$jscoverage['test/argo_test.js'][198]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][199]++;
  wasCalled = true;
}));
}));
  _$jscoverage['test/argo_test.js'][203]++;
  server.call(_getEnv());
  _$jscoverage['test/argo_test.js'][205]++;
  assert.ok(wasCalled);
}));
}));
  _$jscoverage['test/argo_test.js'][209]++;
  describe("when using a package", (function () {
  _$jscoverage['test/argo_test.js'][210]++;
  it("delegates to #include", (function () {
  _$jscoverage['test/argo_test.js'][211]++;
  var server = argo();
  _$jscoverage['test/argo_test.js'][212]++;
  var wasCalled = false;
  _$jscoverage['test/argo_test.js'][214]++;
  var _include = server.include;
  _$jscoverage['test/argo_test.js'][215]++;
  server.include = (function () {
  _$jscoverage['test/argo_test.js'][216]++;
  wasCalled = true;
});
  _$jscoverage['test/argo_test.js'][219]++;
  server.use({package: (function () {
  _$jscoverage['test/argo_test.js'][219]++;
  return ({install: (function () {
})});
})});
  _$jscoverage['test/argo_test.js'][221]++;
  server.include = _include;
  _$jscoverage['test/argo_test.js'][223]++;
  assert.ok(wasCalled);
}));
}));
}));
  _$jscoverage['test/argo_test.js'][228]++;
  describe("#target", (function () {
  _$jscoverage['test/argo_test.js'][229]++;
  it("sets env.target.url", (function (done) {
  _$jscoverage['test/argo_test.js'][230]++;
  argo().target("http://targeturl").use((function (handle) {
  _$jscoverage['test/argo_test.js'][233]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][234]++;
  assert.equal(env.target.url, "http://targeturl");
  _$jscoverage['test/argo_test.js'][235]++;
  done();
}));
})).call(_getEnv());
}));
}));
  _$jscoverage['test/argo_test.js'][243]++;
  describe("#route", (function () {
  _$jscoverage['test/argo_test.js'][244]++;
  it("executes route request handler on matched route", (function (done) {
  _$jscoverage['test/argo_test.js'][245]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][246]++;
  env.request.url = "/route";
  _$jscoverage['test/argo_test.js'][247]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][248]++;
  argo().route("^/route$", (function (handle) {
  _$jscoverage['test/argo_test.js'][250]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][251]++;
  assert.equal(env.request.url, "/route");
  _$jscoverage['test/argo_test.js'][252]++;
  done();
}));
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][258]++;
  it("executes route response handler on matched route", (function (done) {
  _$jscoverage['test/argo_test.js'][259]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][260]++;
  env.request.url = "/route";
  _$jscoverage['test/argo_test.js'][261]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][263]++;
  argo().route("^/route$", (function (handle) {
  _$jscoverage['test/argo_test.js'][265]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][266]++;
  assert.equal(env.request.url, "/route");
  _$jscoverage['test/argo_test.js'][267]++;
  done();
}));
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][273]++;
  it("executes the next handler in the pipeline when no route handler exists", (function (done) {
  _$jscoverage['test/argo_test.js'][274]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][275]++;
  env.request.url = "/rout3";
  _$jscoverage['test/argo_test.js'][276]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][278]++;
  argo().use((function (handle) {
  _$jscoverage['test/argo_test.js'][280]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][281]++;
  assert.equal(env.request.url, "/rout3");
  _$jscoverage['test/argo_test.js'][282]++;
  done();
}));
})).route("^/route$", (function (handle) {
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][290]++;
  it("skips over multiple routes that are chained together", (function (done) {
  _$jscoverage['test/argo_test.js'][291]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][292]++;
  env.request.url = "/goodbye";
  _$jscoverage['test/argo_test.js'][293]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][295]++;
  argo().get("^/hello$", (function (handle) {
})).get("^/goodbye$", (function (handle) {
  _$jscoverage['test/argo_test.js'][298]++;
  assert.equal(env.request.url, "/goodbye");
  _$jscoverage['test/argo_test.js'][299]++;
  done();
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][304]++;
  it("returns first known match", (function (done) {
  _$jscoverage['test/argo_test.js'][305]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][306]++;
  env.request.url = "/route/that/does/not/match/first";
  _$jscoverage['test/argo_test.js'][307]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][309]++;
  argo().route("^/route/.*", (function (handle) {
  _$jscoverage['test/argo_test.js'][311]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][312]++;
  assert.equal(env.request.url, "/route/that/does/not/match/first");
  _$jscoverage['test/argo_test.js'][313]++;
  done();
}));
})).route("^/route/that/does/not/match/first", (function (handle) {
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][320]++;
  it("returns / match on root request", (function (done) {
  _$jscoverage['test/argo_test.js'][321]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][322]++;
  env.request.url = "/";
  _$jscoverage['test/argo_test.js'][323]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][325]++;
  argo().route("^/route$", (function (handle) {
})).route("^/$", (function (handle) {
  _$jscoverage['test/argo_test.js'][328]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][329]++;
  assert.equal(env.request.url, "/");
  _$jscoverage['test/argo_test.js'][330]++;
  done();
}));
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][336]++;
  it("returns 404 when no match exists", (function (done) {
  _$jscoverage['test/argo_test.js'][337]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][338]++;
  env.request.url = "/404";
  _$jscoverage['test/argo_test.js'][339]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][341]++;
  argo().use((function (handle) {
  _$jscoverage['test/argo_test.js'][343]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][344]++;
  assert(env.response.statusCode, 404);
  _$jscoverage['test/argo_test.js'][345]++;
  done();
}));
})).route("^/$", (function (handle) {
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][352]++;
  it("returns wildcard when no match exists", (function (done) {
  _$jscoverage['test/argo_test.js'][353]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][354]++;
  env.request.url = "/404";
  _$jscoverage['test/argo_test.js'][355]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][357]++;
  argo().route("*", (function (handle) {
  _$jscoverage['test/argo_test.js'][359]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][360]++;
  assert.equal(env.request.url, "/404");
  _$jscoverage['test/argo_test.js'][361]++;
  done();
}));
})).route("^/$", (function (handle) {
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][368]++;
  it("executes routes after request middleware regardless of order they are added to pipeline", (function (done) {
  _$jscoverage['test/argo_test.js'][369]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][370]++;
  env.request.url = "/match";
  _$jscoverage['test/argo_test.js'][371]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][373]++;
  argo().route("/match", (function (handle) {
  _$jscoverage['test/argo_test.js'][375]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][376]++;
  assert.equal(env.test, "success");
  _$jscoverage['test/argo_test.js'][377]++;
  done();
}));
})).use((function (handle) {
  _$jscoverage['test/argo_test.js'][381]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][382]++;
  env.test = "success";
  _$jscoverage['test/argo_test.js'][383]++;
  next(env);
}));
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][390]++;
  describe("#map", (function () {
  _$jscoverage['test/argo_test.js'][391]++;
  describe("sub-routing", (function () {
  _$jscoverage['test/argo_test.js'][392]++;
  it("executes the route without a trailing slash", (function (done) {
  _$jscoverage['test/argo_test.js'][393]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][394]++;
  env.request.url = "/map/sub";
  _$jscoverage['test/argo_test.js'][395]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][397]++;
  argo().map("^/map", (function (server) {
  _$jscoverage['test/argo_test.js'][399]++;
  server.route("^/sub$", (function (handle) {
  _$jscoverage['test/argo_test.js'][401]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][402]++;
  assert.equal(env.argo.currentUrl, "/sub");
  _$jscoverage['test/argo_test.js'][403]++;
  assert.equal(env.request.url, "/map/sub");
  _$jscoverage['test/argo_test.js'][404]++;
  done();
  _$jscoverage['test/argo_test.js'][405]++;
  next(env);
}));
}));
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][412]++;
  it("executes the route without a trailing slash with multiple maps", (function (done) {
  _$jscoverage['test/argo_test.js'][413]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][414]++;
  env.request.url = "/map/map2/sub";
  _$jscoverage['test/argo_test.js'][415]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][417]++;
  argo().map("^/map", (function (server) {
  _$jscoverage['test/argo_test.js'][419]++;
  server.map("^/map2", (function (serverTwo) {
  _$jscoverage['test/argo_test.js'][421]++;
  serverTwo.route("^/sub$", (function (handle) {
  _$jscoverage['test/argo_test.js'][422]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][423]++;
  assert.equal(env.argo.currentUrl, "/sub");
  _$jscoverage['test/argo_test.js'][424]++;
  assert.equal(env.request.url, "/map/map2/sub");
  _$jscoverage['test/argo_test.js'][425]++;
  done();
  _$jscoverage['test/argo_test.js'][426]++;
  next(env);
}));
}));
}));
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][434]++;
  it("executes the route with a trailing slash", (function (done) {
  _$jscoverage['test/argo_test.js'][435]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][436]++;
  env.request.url = "/map/sub/";
  _$jscoverage['test/argo_test.js'][437]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][439]++;
  argo().map("^/map", (function (server) {
  _$jscoverage['test/argo_test.js'][441]++;
  server.route("^/sub$", (function (handle) {
  _$jscoverage['test/argo_test.js'][443]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][444]++;
  assert.equal(env.argo.currentUrl, "/sub");
  _$jscoverage['test/argo_test.js'][445]++;
  assert.equal(env.request.url, "/map/sub/");
  _$jscoverage['test/argo_test.js'][446]++;
  done();
  _$jscoverage['test/argo_test.js'][447]++;
  next(env);
}));
}));
})).call(env);
}));
}));
}));
  _$jscoverage['test/argo_test.js'][456]++;
  describe("request buffering", (function () {
  _$jscoverage['test/argo_test.js'][457]++;
  it("responds to error events", (function (done) {
  _$jscoverage['test/argo_test.js'][458]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][459]++;
  env.request = new Request();
  _$jscoverage['test/argo_test.js'][460]++;
  env.target.response = new Response();
  _$jscoverage['test/argo_test.js'][461]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][463]++;
  var _http = {};
  _$jscoverage['test/argo_test.js'][464]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][465]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][466]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][468]++;
  argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][470]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][471]++;
  env.request.getBody((function (err, body) {
  _$jscoverage['test/argo_test.js'][472]++;
  assert.equal(err.message, "Test!");
  _$jscoverage['test/argo_test.js'][473]++;
  done();
}));
}));
})).call(env);
  _$jscoverage['test/argo_test.js'][479]++;
  env.request.emit("error", new Error("Test!"));
  _$jscoverage['test/argo_test.js'][480]++;
  env.request.read(0);
}));
  _$jscoverage['test/argo_test.js'][483]++;
  it("caches body after retrieval", (function (done) {
  _$jscoverage['test/argo_test.js'][484]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][485]++;
  env.request = new Request();
  _$jscoverage['test/argo_test.js'][486]++;
  env.target.response = new Response();
  _$jscoverage['test/argo_test.js'][487]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][489]++;
  var _http = {};
  _$jscoverage['test/argo_test.js'][490]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][491]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][492]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][494]++;
  var app = argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][496]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][497]++;
  env.request.getBody((function (err, body) {
  _$jscoverage['test/argo_test.js'][498]++;
  env.request.getBody((function (err, body) {
  _$jscoverage['test/argo_test.js'][499]++;
  assert.equal(body.toString(), env.request.body.toString());
  _$jscoverage['test/argo_test.js'][500]++;
  done();
}));
}));
}));
}));
  _$jscoverage['test/argo_test.js'][506]++;
  env.request.write(new Buffer("Hello "));
  _$jscoverage['test/argo_test.js'][507]++;
  env.request.write(new Buffer("Buffered "));
  _$jscoverage['test/argo_test.js'][508]++;
  env.request.write(new Buffer("Request!"));
  _$jscoverage['test/argo_test.js'][509]++;
  env.request.end();
  _$jscoverage['test/argo_test.js'][511]++;
  app.call(env);
}));
  _$jscoverage['test/argo_test.js'][514]++;
  it("only buffers once", (function (done) {
  _$jscoverage['test/argo_test.js'][515]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][516]++;
  env.request = new Request();
  _$jscoverage['test/argo_test.js'][517]++;
  env.target.response = new Response();
  _$jscoverage['test/argo_test.js'][518]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][520]++;
  var _http = {};
  _$jscoverage['test/argo_test.js'][521]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][522]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][523]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][525]++;
  var app = argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][527]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][528]++;
  env.request.getBody((function (err, body) {
  _$jscoverage['test/argo_test.js'][529]++;
  assert.equal(body.toString(), "Hello Buffered Request!");
  _$jscoverage['test/argo_test.js'][530]++;
  done();
}));
}));
}));
  _$jscoverage['test/argo_test.js'][535]++;
  env.request.write("Hello ");
  _$jscoverage['test/argo_test.js'][536]++;
  env.request.write("Buffered ");
  _$jscoverage['test/argo_test.js'][537]++;
  env.request.write("Request!");
  _$jscoverage['test/argo_test.js'][538]++;
  env.request.end();
  _$jscoverage['test/argo_test.js'][540]++;
  app.call(env);
}));
  _$jscoverage['test/argo_test.js'][542]++;
  describe("when emitting Buffers", (function () {
  _$jscoverage['test/argo_test.js'][543]++;
  it("returns a full representation of the request body", (function (done) {
  _$jscoverage['test/argo_test.js'][544]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][545]++;
  env.request = new Request();
  _$jscoverage['test/argo_test.js'][547]++;
  var _http = {};
  _$jscoverage['test/argo_test.js'][548]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][549]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][550]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][552]++;
  var app = argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][554]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][555]++;
  env.request.getBody((function (err, body) {
  _$jscoverage['test/argo_test.js'][556]++;
  assert.equal(body.toString(), "Hello Buffered Request!");
  _$jscoverage['test/argo_test.js'][557]++;
  done();
}));
}));
}));
  _$jscoverage['test/argo_test.js'][562]++;
  env.request.write(new Buffer("Hello "));
  _$jscoverage['test/argo_test.js'][563]++;
  env.request.write(new Buffer("Buffered "));
  _$jscoverage['test/argo_test.js'][564]++;
  env.request.write(new Buffer("Request!"));
  _$jscoverage['test/argo_test.js'][565]++;
  env.request.end();
  _$jscoverage['test/argo_test.js'][567]++;
  app.call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][571]++;
  describe("when emitting Strings", (function () {
  _$jscoverage['test/argo_test.js'][572]++;
  it("returns a full representation of the request body", (function (done) {
  _$jscoverage['test/argo_test.js'][573]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][574]++;
  env.request = new Request();
  _$jscoverage['test/argo_test.js'][576]++;
  var _http = {};
  _$jscoverage['test/argo_test.js'][577]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][578]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][579]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][581]++;
  var app = argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][583]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][584]++;
  env.request.getBody((function (err, body) {
  _$jscoverage['test/argo_test.js'][585]++;
  assert.equal(body.toString(), "Hello Buffered Request!");
  _$jscoverage['test/argo_test.js'][586]++;
  done();
}));
}));
}));
  _$jscoverage['test/argo_test.js'][591]++;
  env.request.write("Hello ");
  _$jscoverage['test/argo_test.js'][592]++;
  env.request.write("Buffered ");
  _$jscoverage['test/argo_test.js'][593]++;
  env.request.write("Request!");
  _$jscoverage['test/argo_test.js'][594]++;
  env.request.end();
  _$jscoverage['test/argo_test.js'][596]++;
  app.call(env);
}));
}));
}));
  _$jscoverage['test/argo_test.js'][601]++;
  describe("response buffering", (function () {
  _$jscoverage['test/argo_test.js'][602]++;
  it("only buffers once", (function (done) {
  _$jscoverage['test/argo_test.js'][603]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][604]++;
  env.target.response = new Response();
  _$jscoverage['test/argo_test.js'][605]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][607]++;
  var _http = {};
  _$jscoverage['test/argo_test.js'][608]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][609]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][610]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][612]++;
  var app = argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][614]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][615]++;
  env.target.response.getBody((function (err, body) {
  _$jscoverage['test/argo_test.js'][616]++;
  assert.equal(body.toString(), "Hello Buffered Response!");
  _$jscoverage['test/argo_test.js'][617]++;
  done();
}));
}));
}));
  _$jscoverage['test/argo_test.js'][622]++;
  env.target.response.write("Hello ");
  _$jscoverage['test/argo_test.js'][623]++;
  env.target.response.write("Buffered ");
  _$jscoverage['test/argo_test.js'][624]++;
  env.target.response.write("Response!");
  _$jscoverage['test/argo_test.js'][625]++;
  env.target.response.end();
  _$jscoverage['test/argo_test.js'][627]++;
  app.call(env);
}));
  _$jscoverage['test/argo_test.js'][630]++;
  describe("when emitting Buffers", (function () {
  _$jscoverage['test/argo_test.js'][631]++;
  it("returns a full representation of the response body", (function (done) {
  _$jscoverage['test/argo_test.js'][632]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][633]++;
  env.target.response = new Response();
  _$jscoverage['test/argo_test.js'][634]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][636]++;
  var _http = {};
  _$jscoverage['test/argo_test.js'][637]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][638]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][639]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][641]++;
  var app = argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][643]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][644]++;
  env.target.response.getBody((function (err, body) {
  _$jscoverage['test/argo_test.js'][645]++;
  assert.equal(body.toString(), "Hello Buffered Response!");
  _$jscoverage['test/argo_test.js'][646]++;
  done();
}));
}));
}));
  _$jscoverage['test/argo_test.js'][651]++;
  env.target.response.write(new Buffer("Hello "));
  _$jscoverage['test/argo_test.js'][652]++;
  env.target.response.write(new Buffer("Buffered "));
  _$jscoverage['test/argo_test.js'][653]++;
  env.target.response.write(new Buffer("Response!"));
  _$jscoverage['test/argo_test.js'][654]++;
  env.target.response.end();
  _$jscoverage['test/argo_test.js'][656]++;
  app.call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][660]++;
  describe("when emitting Strings", (function () {
  _$jscoverage['test/argo_test.js'][661]++;
  it("returns a full representation of the response body", (function (done) {
  _$jscoverage['test/argo_test.js'][662]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][663]++;
  env.target.response = new Response();
  _$jscoverage['test/argo_test.js'][664]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][666]++;
  var _http = {};
  _$jscoverage['test/argo_test.js'][667]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][668]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][669]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][671]++;
  var app = argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][673]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][674]++;
  env.target.response.getBody((function (err, body) {
  _$jscoverage['test/argo_test.js'][675]++;
  assert.equal(body.toString(), "Hello Buffered Response!");
  _$jscoverage['test/argo_test.js'][676]++;
  done();
}));
}));
}));
  _$jscoverage['test/argo_test.js'][681]++;
  env.target.response.write("Hello ");
  _$jscoverage['test/argo_test.js'][682]++;
  env.target.response.write("Buffered ");
  _$jscoverage['test/argo_test.js'][683]++;
  env.target.response.write("Response!");
  _$jscoverage['test/argo_test.js'][684]++;
  env.target.response.end();
  _$jscoverage['test/argo_test.js'][686]++;
  app.call(env);
}));
}));
}));
  _$jscoverage['test/argo_test.js'][691]++;
  describe("response ender", (function () {
  _$jscoverage['test/argo_test.js'][692]++;
  it("sets a response body when env.response.body is empty", (function (done) {
  _$jscoverage['test/argo_test.js'][693]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][694]++;
  env.target.response = new Response();
  _$jscoverage['test/argo_test.js'][695]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][696]++;
  env.response.setHeader = (function () {
});
  _$jscoverage['test/argo_test.js'][697]++;
  env.response.getHeader = (function (header) {
  _$jscoverage['test/argo_test.js'][698]++;
  if (header.toLowerCase() === "content-length") {
    _$jscoverage['test/argo_test.js'][699]++;
    return "Horticulture Fancy".length.toString();
  }
});
  _$jscoverage['test/argo_test.js'][702]++;
  env.response.writeHead = (function () {
});
  _$jscoverage['test/argo_test.js'][703]++;
  env.response.end = (function (body) {
  _$jscoverage['test/argo_test.js'][704]++;
  assert.equal(body, "Horticulture Fancy");
  _$jscoverage['test/argo_test.js'][705]++;
  done();
});
  _$jscoverage['test/argo_test.js'][708]++;
  var app = argo();
  _$jscoverage['test/argo_test.js'][710]++;
  env.target.response.write("Horticulture Fancy");
  _$jscoverage['test/argo_test.js'][711]++;
  env.target.response.end();
  _$jscoverage['test/argo_test.js'][713]++;
  app.call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][717]++;
  describe("#get", (function () {
  _$jscoverage['test/argo_test.js'][718]++;
  it("responds to a GET request", (function (done) {
  _$jscoverage['test/argo_test.js'][719]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][720]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][721]++;
  env.request.url = "/sheep";
  _$jscoverage['test/argo_test.js'][723]++;
  argo().get("^/sheep$", (function (handle) {
  _$jscoverage['test/argo_test.js'][725]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][726]++;
  assert.equal(env.request.method, "GET");
  _$jscoverage['test/argo_test.js'][727]++;
  done();
}));
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][734]++;
  describe("#post", (function () {
  _$jscoverage['test/argo_test.js'][735]++;
  it("responds to a POST request", (function (done) {
  _$jscoverage['test/argo_test.js'][736]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][737]++;
  env.request.method = "POST";
  _$jscoverage['test/argo_test.js'][738]++;
  env.request.url = "/sheep";
  _$jscoverage['test/argo_test.js'][740]++;
  argo().post("^/sheep$", (function (handle) {
  _$jscoverage['test/argo_test.js'][742]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][743]++;
  assert.equal(env.request.method, "POST");
  _$jscoverage['test/argo_test.js'][744]++;
  done();
}));
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][751]++;
  describe("#put", (function () {
  _$jscoverage['test/argo_test.js'][752]++;
  it("responds to a PUT request", (function (done) {
  _$jscoverage['test/argo_test.js'][753]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][754]++;
  env.request.method = "PUT";
  _$jscoverage['test/argo_test.js'][755]++;
  env.request.url = "/sheep";
  _$jscoverage['test/argo_test.js'][757]++;
  argo().put("^/sheep$", (function (handle) {
  _$jscoverage['test/argo_test.js'][759]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][760]++;
  assert.equal(env.request.method, "PUT");
  _$jscoverage['test/argo_test.js'][761]++;
  done();
}));
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][768]++;
  describe("#del", (function () {
  _$jscoverage['test/argo_test.js'][769]++;
  it("responds to a DELETE request", (function (done) {
  _$jscoverage['test/argo_test.js'][770]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][771]++;
  env.request.method = "DELETE";
  _$jscoverage['test/argo_test.js'][772]++;
  env.request.url = "/sheep";
  _$jscoverage['test/argo_test.js'][774]++;
  argo().del("^/sheep$", (function (handle) {
  _$jscoverage['test/argo_test.js'][776]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][777]++;
  assert.equal(env.request.method, "DELETE");
  _$jscoverage['test/argo_test.js'][778]++;
  done();
}));
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][785]++;
  describe("#head", (function () {
  _$jscoverage['test/argo_test.js'][786]++;
  it("responds to a HEAD request", (function (done) {
  _$jscoverage['test/argo_test.js'][787]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][788]++;
  env.request.method = "HEAD";
  _$jscoverage['test/argo_test.js'][789]++;
  env.request.url = "/sheep";
  _$jscoverage['test/argo_test.js'][791]++;
  argo().head("^/sheep$", (function (handle) {
  _$jscoverage['test/argo_test.js'][793]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][794]++;
  assert.equal(env.request.method, "HEAD");
  _$jscoverage['test/argo_test.js'][795]++;
  done();
}));
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][802]++;
  describe("#options", (function () {
  _$jscoverage['test/argo_test.js'][803]++;
  it("responds to a OPTIONS request", (function (done) {
  _$jscoverage['test/argo_test.js'][804]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][805]++;
  env.request.method = "OPTIONS";
  _$jscoverage['test/argo_test.js'][806]++;
  env.request.url = "/sheep";
  _$jscoverage['test/argo_test.js'][808]++;
  argo().options("^/sheep$", (function (handle) {
  _$jscoverage['test/argo_test.js'][810]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][811]++;
  assert.equal(env.request.method, "OPTIONS");
  _$jscoverage['test/argo_test.js'][812]++;
  done();
}));
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][820]++;
  describe("#trace", (function () {
  _$jscoverage['test/argo_test.js'][821]++;
  it("responds to a TRACE request", (function (done) {
  _$jscoverage['test/argo_test.js'][822]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][823]++;
  env.request.method = "TRACE";
  _$jscoverage['test/argo_test.js'][824]++;
  env.request.url = "/sheep";
  _$jscoverage['test/argo_test.js'][826]++;
  argo().trace("^/sheep$", (function (handle) {
  _$jscoverage['test/argo_test.js'][828]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][829]++;
  assert.equal(env.request.method, "TRACE");
  _$jscoverage['test/argo_test.js'][830]++;
  done();
}));
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][837]++;
  describe("#run", (function () {
  _$jscoverage['test/argo_test.js'][838]++;
  it("works as a request listener", (function (done) {
  _$jscoverage['test/argo_test.js'][839]++;
  var proxy = argo().get("^/sheep$", (function (handle) {
  _$jscoverage['test/argo_test.js'][841]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][842]++;
  assert.equal(env.request.token, "worked");
  _$jscoverage['test/argo_test.js'][843]++;
  done();
}));
})).build();
  _$jscoverage['test/argo_test.js'][848]++;
  var request = {method: "GET", url: "/sheep", token: "worked"};
  _$jscoverage['test/argo_test.js'][849]++;
  var response = {};
  _$jscoverage['test/argo_test.js'][851]++;
  proxy.run(request, response);
}));
}));
  _$jscoverage['test/argo_test.js'][855]++;
  describe("method routing", (function () {
  _$jscoverage['test/argo_test.js'][856]++;
  it("returns a 405 Method Not Allowed on unsupported methods", (function (done) {
  _$jscoverage['test/argo_test.js'][857]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][858]++;
  env.request.method = "POST";
  _$jscoverage['test/argo_test.js'][859]++;
  env.request.url = "/sheep";
  _$jscoverage['test/argo_test.js'][860]++;
  env.response.writeHead = (function (status, headers) {
  _$jscoverage['test/argo_test.js'][861]++;
  assert.equal(status, 405);
  _$jscoverage['test/argo_test.js'][862]++;
  done();
});
  _$jscoverage['test/argo_test.js'][865]++;
  argo().get("^/sheep$", (function (handle) {
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][871]++;
  describe("request proxying", (function () {
  _$jscoverage['test/argo_test.js'][872]++;
  it("passes through if response headers have already been sent", (function (done) {
  _$jscoverage['test/argo_test.js'][873]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][874]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][875]++;
  env.request.url = "/proxy";
  _$jscoverage['test/argo_test.js'][876]++;
  env.response._headerSent = true;
  _$jscoverage['test/argo_test.js'][878]++;
  var _http = (function () {
});
  _$jscoverage['test/argo_test.js'][879]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][880]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][881]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][883]++;
  argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][885]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][886]++;
  assert.ok(! env.target.response);
  _$jscoverage['test/argo_test.js'][887]++;
  done();
}));
})).target("http://argotest").call(env);
}));
  _$jscoverage['test/argo_test.js'][894]++;
  it("forwards requests to a target", (function (done) {
  _$jscoverage['test/argo_test.js'][895]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][896]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][897]++;
  env.request.url = "/proxy";
  _$jscoverage['test/argo_test.js'][899]++;
  var _http = (function () {
});
  _$jscoverage['test/argo_test.js'][900]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][901]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][902]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][903]++;
  _http.request = (function (options, callback) {
  _$jscoverage['test/argo_test.js'][904]++;
  assert.equal(options.method, "GET");
  _$jscoverage['test/argo_test.js'][905]++;
  assert.equal(options.hostname, "argotest");
  _$jscoverage['test/argo_test.js'][906]++;
  assert.equal(options.headers.Host, "argotest");
  _$jscoverage['test/argo_test.js'][907]++;
  assert.equal(options.path, "/proxy");
  _$jscoverage['test/argo_test.js'][908]++;
  assert.equal(options.auth, "argo:rocks");
  _$jscoverage['test/argo_test.js'][910]++;
  return ({write: (function (str) {
  _$jscoverage['test/argo_test.js'][912]++;
  assert.equal(str, "body");
  _$jscoverage['test/argo_test.js'][913]++;
  done();
}), end: (function () {
}), on: (function () {
})});
});
  _$jscoverage['test/argo_test.js'][920]++;
  var app = argo(_http).target("http://argo:rocks@argotest");
  _$jscoverage['test/argo_test.js'][923]++;
  env.request.write("body");
  _$jscoverage['test/argo_test.js'][924]++;
  env.request.end();
  _$jscoverage['test/argo_test.js'][926]++;
  app.call(env);
}));
  _$jscoverage['test/argo_test.js'][930]++;
  it("targets a proxy only once", (function (done) {
  _$jscoverage['test/argo_test.js'][931]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][932]++;
  env.request.url = "/map";
  _$jscoverage['test/argo_test.js'][933]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][935]++;
  var count = 0;
  _$jscoverage['test/argo_test.js'][937]++;
  var _http = (function () {
});
  _$jscoverage['test/argo_test.js'][938]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][939]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][940]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][941]++;
  _http.request = (function (options, callback) {
  _$jscoverage['test/argo_test.js'][942]++;
  count++;
  _$jscoverage['test/argo_test.js'][943]++;
  var res = new Response();
  _$jscoverage['test/argo_test.js'][944]++;
  callback(res);
  _$jscoverage['test/argo_test.js'][945]++;
  return ({write: (function () {
}), end: (function () {
}), on: (function () {
})});
});
  _$jscoverage['test/argo_test.js'][952]++;
  argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][954]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][955]++;
  assert.equal(count, 1);
  _$jscoverage['test/argo_test.js'][956]++;
  done();
  _$jscoverage['test/argo_test.js'][957]++;
  next(env);
}));
})).map("/map", (function (proxy) {
  _$jscoverage['test/argo_test.js'][961]++;
  proxy.target("http://proxy");
})).target("http://argo").call(env);
}));
  _$jscoverage['test/argo_test.js'][968]++;
  it("copies raw headers to the response", (function (done) {
  _$jscoverage['test/argo_test.js'][969]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][971]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][972]++;
  env.request.url = "/proxy";
  _$jscoverage['test/argo_test.js'][973]++;
  env.response.setHeader = (function (name, value) {
  _$jscoverage['test/argo_test.js'][974]++;
  if (name.toLowerCase() === "x-stuff") {
    _$jscoverage['test/argo_test.js'][975]++;
    assert(name, "X-Stuff");
  }
});
  _$jscoverage['test/argo_test.js'][978]++;
  env.response.body = "proxied!";
  _$jscoverage['test/argo_test.js'][980]++;
  var _http = (function () {
});
  _$jscoverage['test/argo_test.js'][981]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][982]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][983]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][984]++;
  _http.request = (function (options, callback) {
  _$jscoverage['test/argo_test.js'][985]++;
  var res = new Response();
  _$jscoverage['test/argo_test.js'][986]++;
  res._rawHeaderNames = {"x-stuff": "X-Stuff"};
  _$jscoverage['test/argo_test.js'][987]++;
  res.headers = {"X-Stuff": "yep"};
  _$jscoverage['test/argo_test.js'][988]++;
  callback(res);
  _$jscoverage['test/argo_test.js'][989]++;
  return ({end: done, on: (function () {
})});
});
  _$jscoverage['test/argo_test.js'][992]++;
  argo(_http).target("http://google.com").call(env);
}));
  _$jscoverage['test/argo_test.js'][997]++;
  it("sets the status code to 503 on target error", (function (done) {
  _$jscoverage['test/argo_test.js'][998]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][1000]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][1001]++;
  env.request.url = "/proxy";
  _$jscoverage['test/argo_test.js'][1002]++;
  env.response.body = "proxied!";
  _$jscoverage['test/argo_test.js'][1004]++;
  var _http = (function () {
});
  _$jscoverage['test/argo_test.js'][1005]++;
  _http.Agent = (function () {
});
  _$jscoverage['test/argo_test.js'][1006]++;
  _http.IncomingMessage = Request;
  _$jscoverage['test/argo_test.js'][1007]++;
  _http.ServerResponse = Response;
  _$jscoverage['test/argo_test.js'][1008]++;
  _http.request = (function (options, callback) {
  _$jscoverage['test/argo_test.js'][1009]++;
  var req = new EventEmitter();
  _$jscoverage['test/argo_test.js'][1010]++;
  var end = (function () {
  _$jscoverage['test/argo_test.js'][1011]++;
  req.emit("error", new Error("fake error"));
});
  _$jscoverage['test/argo_test.js'][1014]++;
  return ({end: end, on: req.on.bind(req), socket: {destroy: (function () {
})}});
});
  _$jscoverage['test/argo_test.js'][1021]++;
  argo(_http).use((function (handle) {
  _$jscoverage['test/argo_test.js'][1023]++;
  handle("response", (function (env, next) {
  _$jscoverage['test/argo_test.js'][1024]++;
  assert.equal(env.response.statusCode, 503);
  _$jscoverage['test/argo_test.js'][1025]++;
  done();
}));
})).target("http://google.com").call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][1033]++;
  describe("response serving", (function () {
  _$jscoverage['test/argo_test.js'][1034]++;
  it("serves streams", (function (done) {
  _$jscoverage['test/argo_test.js'][1035]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][1036]++;
  env.request = new Request();
  _$jscoverage['test/argo_test.js'][1037]++;
  env.request.url = "/hello";
  _$jscoverage['test/argo_test.js'][1038]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][1039]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][1041]++;
  var test = "";
  _$jscoverage['test/argo_test.js'][1042]++;
  env.response.write = (function (chunk) {
  _$jscoverage['test/argo_test.js'][1043]++;
  test += chunk.toString();
});
  _$jscoverage['test/argo_test.js'][1046]++;
  env.response.end = (function () {
  _$jscoverage['test/argo_test.js'][1047]++;
  assert.equal("Hello, World!", test);
  _$jscoverage['test/argo_test.js'][1048]++;
  done();
});
  _$jscoverage['test/argo_test.js'][1051]++;
  var stream = new Stream();
  _$jscoverage['test/argo_test.js'][1052]++;
  stream.data = true;
  _$jscoverage['test/argo_test.js'][1054]++;
  argo().get("^/hello$", (function (handle) {
  _$jscoverage['test/argo_test.js'][1056]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][1057]++;
  env.response.statusCode = 200;
  _$jscoverage['test/argo_test.js'][1058]++;
  env.response.headers["Content-Type"] = "text/plain";
  _$jscoverage['test/argo_test.js'][1059]++;
  env.response.body = stream;
  _$jscoverage['test/argo_test.js'][1060]++;
  next(env);
}));
})).call(env);
  _$jscoverage['test/argo_test.js'][1065]++;
  stream.emit("data", "Hello, World!");
  _$jscoverage['test/argo_test.js'][1066]++;
  stream.emit("end");
}));
  _$jscoverage['test/argo_test.js'][1069]++;
  it("serves stringified JSON objects", (function (done) {
  _$jscoverage['test/argo_test.js'][1070]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][1071]++;
  env.request = new Request();
  _$jscoverage['test/argo_test.js'][1072]++;
  env.request.url = "/hello";
  _$jscoverage['test/argo_test.js'][1073]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][1074]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][1076]++;
  env.response.end = (function (body) {
  _$jscoverage['test/argo_test.js'][1077]++;
  assert.equal("application/json; charset=UTF-8", env.response.getHeader("Content-Type"));
  _$jscoverage['test/argo_test.js'][1078]++;
  assert.equal("{\"hello\":\"World\"}", body);
  _$jscoverage['test/argo_test.js'][1079]++;
  done();
});
  _$jscoverage['test/argo_test.js'][1082]++;
  argo().get("^/hello$", (function (handle) {
  _$jscoverage['test/argo_test.js'][1084]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][1085]++;
  env.response.statusCode = 200;
  _$jscoverage['test/argo_test.js'][1086]++;
  env.response.body = {hello: "World"};
  _$jscoverage['test/argo_test.js'][1087]++;
  next(env);
}));
})).call(env);
}));
  _$jscoverage['test/argo_test.js'][1093]++;
  it("serves serves an empty response when the Content-Length is 0", (function (done) {
  _$jscoverage['test/argo_test.js'][1094]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][1095]++;
  env.request = new Request();
  _$jscoverage['test/argo_test.js'][1096]++;
  env.request.url = "/hello";
  _$jscoverage['test/argo_test.js'][1097]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][1098]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][1100]++;
  env.response.end = (function (body) {
  _$jscoverage['test/argo_test.js'][1101]++;
  assert.ok(! body);
  _$jscoverage['test/argo_test.js'][1102]++;
  done();
});
  _$jscoverage['test/argo_test.js'][1105]++;
  argo().get("^/hello$", (function (handle) {
  _$jscoverage['test/argo_test.js'][1107]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][1108]++;
  env.response.statusCode = 200;
  _$jscoverage['test/argo_test.js'][1109]++;
  env.response.headers["Content-Length"] = 0;
  _$jscoverage['test/argo_test.js'][1110]++;
  next(env);
}));
})).call(env);
}));
}));
  _$jscoverage['test/argo_test.js'][1117]++;
  describe("error handling", (function () {
  _$jscoverage['test/argo_test.js'][1118]++;
  it("captures state on exception", (function (done) {
  _$jscoverage['test/argo_test.js'][1119]++;
  var env = _getEnv();
  _$jscoverage['test/argo_test.js'][1120]++;
  env.request = new Request();
  _$jscoverage['test/argo_test.js'][1121]++;
  env.request.url = "/yo";
  _$jscoverage['test/argo_test.js'][1122]++;
  env.request.method = "GET";
  _$jscoverage['test/argo_test.js'][1123]++;
  env.response = new Response();
  _$jscoverage['test/argo_test.js'][1125]++;
  var server = argo().use((function (handle) {
  _$jscoverage['test/argo_test.js'][1127]++;
  handle("error", (function (env, error, next) {
  _$jscoverage['test/argo_test.js'][1128]++;
  assert.equal(env.token, "TADA!");
  _$jscoverage['test/argo_test.js'][1129]++;
  done();
}));
})).get("^/yo$", (function (handle) {
  _$jscoverage['test/argo_test.js'][1133]++;
  handle("request", (function (env, next) {
  _$jscoverage['test/argo_test.js'][1134]++;
  env.token = "TADA!";
  _$jscoverage['test/argo_test.js'][1135]++;
  throw new Error("KAPOW!");
}));
}));
  _$jscoverage['test/argo_test.js'][1139]++;
  process.nextTick((function () {
  _$jscoverage['test/argo_test.js'][1140]++;
  server.call(env);
}));
}));
}));
}));
_$jscoverage['test/argo_test.js'].source = ["var assert = require('assert');","var EventEmitter = require('events').EventEmitter;","var fs = require('fs');","var http = require('http');","var Stream = require('stream');","var argo = require('../');","var util = require('util');","var Environment = require('../environment');","","function Request() {","  this.headers = {};","  this.chunks = [];","  Stream.Duplex.call(this);","}","util.inherits(Request, Stream.Duplex);","","Request.prototype._read = function(size) {","  var chunk = this.chunks.length ? this.chunks.shift() : null;","  this.push(chunk);","};","","Request.prototype._write = function(chunk, encoding, callback) {","  this.chunks.push(chunk);","  callback();","};","","function Response() {","  this.headers = {};","  this.statusCode = 0;","  this.body = null;","  this.chunks = [];","  Stream.Duplex.call(this);","}","util.inherits(Response, Stream.Duplex);","","Response.prototype._read = function(size) {","  var chunk = this.chunks.length ? this.chunks.shift() : null;","  this.push(chunk);","};","","Response.prototype._write = function(chunk, encoding, callback) {","  this.chunks.push(chunk);","  callback();","};","","Response.prototype.setHeader = function(k, v) {","  this.headers[k] = v;","};","","Response.prototype.writeHead = function(s, h) {","  this.statusCode = s;","  this.headers = h;","}","","Response.prototype.getHeader = function(k) {","  return this.headers[k];","};","","Response.prototype.end = function(b) {","  this.body = b;","};","","function _getEnv() {","  return { ","    request: new Request(),","    response: new Response(),","    target: {},","    argo: {}","  };","}","","describe('Argo', function() {","  describe('ctor', function() {","    it('alters http.IncomingMessage.prototype', function() {","      argo(http);","      assert.ok(http.IncomingMessage.prototype._argoModified);","    });","  });","","  describe('#include', function() {","    it('evaluates a package', function() {","      var mixin = {","        package: function(server) {","          return { ","            install: function() {","              server.mixin = true;","            }","          };","        }","      };","","      var server = argo().include(mixin);","      ","      assert.ok(server.mixin);","    });","  });","","  describe('#listen', function() {","    it('calls http server listen', function(done) {","      var Http = function() {};","      Http.prototype.createServer = function() {","        return this;","      };","","      Http.prototype.listen = function(port) {","        assert.equal(port, 1234);","        done();","      };","","      var _http = new Http();","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.Agent = function() {};","","      argo(_http).listen(1234);","    });","  });","","  describe('#use', function() {","    describe('argo execution pipeline', function() {","      it('executes response handlers in reverse order', function(done) {","          var server = argo();","          var wasCalled = false;","          server","            .use(function(handle) {","              handle(\"response\", function(env, next) {","                assert.equal(true, wasCalled);","                done();","              });","            })","            .use(function(handle) {","              handle(\"response\", function(env, next) {","                wasCalled = true;","                next(env);","              });","            });","          server.call(_getEnv());","      });","    });","    describe('when using middleware', function() {","      it('delegates to Builder#use', function() {","        var server = argo();","        var wasCalled = false;","","        var _use = server.builder.use;","        server.builder.use = function(middleware) {","          wasCalled = true;","        };","","        server.builder.use(function(handle) {});","","        server.builder.use = _use;","","        assert.ok(wasCalled);","      });","","      it('enqueues a middleware request handler', function() {","        var server = argo();","        var wasCalled = false;","","        server.use(function(handle) {","          handle('request', function(env, next) {","            wasCalled = true;","          });","        });","","        server.call(_getEnv());","","        assert.ok(wasCalled);","      });","","      it('enqueues a custom event middleware', function(){","        var server = argo();","        server.use(function(handle){","          handle('custom', function(env, next){","          });","        });","        server.call(_getEnv());","        assert.ok('custom' in server.builder.pipelineMap);","      });","","      it('can access custom pipelines using _pipeline', function(){","        var server = argo();","        server.use(function(handle){","          handle('custom', function(env, next){","          });","        });","        server.call(_getEnv());","        var pipe = server._pipeline('custom');","        assert.ok(typeof pipe !== \"undefined\");","      });","","      it('enqueues a middleware response handler', function() {","        var server = argo();","        var wasCalled = false;","","        server.use(function(handle) {","          handle('response', function(env, next) {","            wasCalled = true;","          });","        });","","        server.call(_getEnv());","","        assert.ok(wasCalled);","      });","    });","","    describe('when using a package', function() {","      it('delegates to #include', function() {","        var server = argo();","        var wasCalled = false;","","        var _include = server.include;","        server.include = function() {","          wasCalled = true;","        };","","        server.use({ package: function() { return { install: function() {} }; } });","","        server.include = _include;","","        assert.ok(wasCalled);","      });","    });","  });","","  describe('#target', function() {","    it('sets env.target.url', function(done) {","      argo()","        .target('http://targeturl')","        .use(function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.target.url, 'http://targeturl');","            done();","            //next(env);","          });","        })","        .call(_getEnv());","    });","  });","","  describe('#route', function() {","    it('executes route request handler on matched route', function(done) {","      var env = _getEnv();","      env.request.url = '/route';","      env.request.method = 'GET';","      argo()","        .route('^/route$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.url, '/route');","            done();","          });","        })","      .call(env);","    });","","    it('executes route response handler on matched route', function(done) {","      var env = _getEnv();","      env.request.url = '/route';","      env.request.method = 'GET';","","      argo()","        .route('^/route$', function(handle) {","          handle('response', function(env, next) {","            assert.equal(env.request.url, '/route');","            done();","          });","        })","      .call(env);","    });","","    it('executes the next handler in the pipeline when no route handler exists', function(done) {","      var env = _getEnv();","      env.request.url = '/rout3';","      env.request.method = 'GET';","","      argo()","        .use(function(handle) {","          handle('response', function(env, next) {","            assert.equal(env.request.url, '/rout3');","            done();","          });","        })","        .route('^/route$', function(handle) {","        })","        .call(env);","    });","","    it('skips over multiple routes that are chained together', function(done){","      var env = _getEnv();","      env.request.url = '/goodbye';","      env.request.method = 'GET';","","      argo()","        .get('^/hello$', function(handle){})","        .get('^/goodbye$', function(handle){","          assert.equal(env.request.url, '/goodbye');","            done();","        })","        .call(env);","    });","","    it('returns first known match', function(done) {","      var env = _getEnv();","      env.request.url = '/route/that/does/not/match/first';","      env.request.method = 'GET';","","      argo()","        .route('^/route/.*', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.url, '/route/that/does/not/match/first');","            done();","          });","        })","        .route('^/route/that/does/not/match/first', function(handle) { })","      .call(env);","    });","","    it('returns / match on root request', function(done) {","      var env = _getEnv();","      env.request.url = '/';","      env.request.method = 'GET';","","      argo()","        .route('^/route$', function(handle) { })","        .route('^/$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.url, '/');","            done();","          });","        })","      .call(env);","    });","","    it('returns 404 when no match exists', function(done) {","      var env = _getEnv();","      env.request.url = '/404';","      env.request.method = 'GET';","","      argo()","        .use(function(handle) {","          handle('response', function(env, next) {","            assert(env.response.statusCode, 404);","            done();","          });","        })","        .route('^/$', function(handle) { })","      .call(env);","    });","","    it('returns wildcard when no match exists', function(done) {","      var env = _getEnv();","      env.request.url = '/404';","      env.request.method = 'GET';","","      argo()","        .route('*', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.url, '/404');","            done();","          });","        })","        .route('^/$', function(handle) { })","      .call(env);","    });","","    it('executes routes after request middleware regardless of order they are added to pipeline', function(done) {","      var env = _getEnv();","      env.request.url = '/match';","      env.request.method = 'GET';","","      argo()","        .route('/match', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.test, 'success');","            done();","          });","        })","        .use(function(handle) {","          handle('request', function(env, next) {","            env.test = 'success';","            next(env);","          });","        })","      .call(env);","    });","  });","","  describe('#map', function() {","    describe('sub-routing', function() {","      it('executes the route without a trailing slash', function(done) {","        var env = _getEnv();","        env.request.url = '/map/sub';","        env.request.method = 'GET';","","        argo()","          .map('^/map', function(server) {","            server","              .route('^/sub$', function(handle) {","                handle('request', function(env, next) {","                  assert.equal(env.argo.currentUrl, '/sub');","                  assert.equal(env.request.url, '/map/sub');","                  done();","                  next(env);","                });","              });","          })","          .call(env);","      });","","      it('executes the route without a trailing slash with multiple maps', function(done) {","        var env = _getEnv();","        env.request.url = '/map/map2/sub';","        env.request.method = 'GET';","","        argo()","          .map('^/map', function(server) {","            server","              .map('^/map2', function(serverTwo){","                serverTwo.route('^/sub$', function(handle) {","                  handle('request', function(env, next) {","                    assert.equal(env.argo.currentUrl, '/sub');","                    assert.equal(env.request.url, '/map/map2/sub');","                    done();","                    next(env);","                  });","                });","              })","          })","          .call(env);","      });","","      it('executes the route with a trailing slash', function(done) {","        var env = _getEnv();","        env.request.url = '/map/sub/';","        env.request.method = 'GET';","","        argo()","          .map('^/map', function(server) {","            server","              .route('^/sub$', function(handle) {","                handle('request', function(env, next) {","                  assert.equal(env.argo.currentUrl, '/sub');","                  assert.equal(env.request.url, '/map/sub/');","                  done();","                  next(env);","                });","              });","          })","          .call(env);","      });","    });","  });","","  describe('request buffering', function() {","    it('responds to error events', function(done){","      var env = _getEnv();","      env.request = new Request();","      env.target.response = new Response();","      env.response = new Response();","","      var _http = {};","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.Agent = function() {};","","      argo(_http)","        .use(function(handle) {","          handle('response', function(env, next) {","            env.request.getBody(function(err, body) {","              assert.equal(err.message, 'Test!');","              done();","            });","          });","        })","        .call(env);","","      env.request.emit('error', new Error(\"Test!\"));","      env.request.read(0);","    });","","    it('caches body after retrieval', function(done){","      var env = _getEnv();","      env.request = new Request();","      env.target.response = new Response();","      env.response = new Response();","","      var _http = {};","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.Agent = function() {};","","      var app = argo(_http)","        .use(function(handle) {","          handle('response', function(env, next) {","            env.request.getBody(function(err, body) {","              env.request.getBody(function(err, body) {","                assert.equal(body.toString(), env.request.body.toString());","                done();","              });","            });","          });","        });","","      env.request.write(new Buffer('Hello '));","      env.request.write(new Buffer('Buffered '));","      env.request.write(new Buffer('Request!'));","      env.request.end();","      ","      app.call(env);","    });","","    it('only buffers once', function(done) {","      var env = _getEnv();","      env.request = new Request();","      env.target.response = new Response();","      env.response = new Response();","","      var _http = {};","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.Agent = function() {};","","      var app = argo(_http)","        .use(function(handle) {","          handle('response', function(env, next) {","            env.request.getBody(function(err, body) {","              assert.equal(body.toString(), 'Hello Buffered Request!');","              done();","            });","          });","        });","","      env.request.write('Hello ');","      env.request.write('Buffered ');","      env.request.write('Request!');","      env.request.end();","      ","      app.call(env);","    });","    describe('when emitting Buffers', function() {","      it('returns a full representation of the request body', function(done) {","        var env = _getEnv();","        env.request = new Request();","","        var _http = {};","        _http.IncomingMessage = Request;","        _http.ServerResponse = Response;","        _http.Agent = function() {};","","        var app = argo(_http)","          .use(function(handle) {","            handle('request', function(env, next) {","              env.request.getBody(function(err, body) {","                assert.equal(body.toString(), 'Hello Buffered Request!');","                done();","              });","            });","          });","","        env.request.write(new Buffer('Hello '));","        env.request.write(new Buffer('Buffered '));","        env.request.write(new Buffer('Request!'));","        env.request.end();","      ","        app.call(env);","      });","    });","","    describe('when emitting Strings', function() {","      it('returns a full representation of the request body', function(done) {","        var env = _getEnv();","        env.request = new Request();","","        var _http = {};","        _http.IncomingMessage = Request;","        _http.ServerResponse = Response;","        _http.Agent = function() {};","","        var app = argo(_http)","          .use(function(handle) {","            handle('request', function(env, next) {","              env.request.getBody(function(err, body) {","                assert.equal(body.toString(), 'Hello Buffered Request!');","                done();","              });","            });","          });","","        env.request.write('Hello ');","        env.request.write('Buffered ');","        env.request.write('Request!');","        env.request.end();","      ","        app.call(env);","      });","    });","  });","","  describe('response buffering', function() {","    it('only buffers once', function(done) {","      var env = _getEnv();","      env.target.response = new Response();","      env.response = new Response();","","      var _http = {};","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.Agent = function() {};","","      var app = argo(_http)","        .use(function(handle) {","          handle('response', function(env, next) {","            env.target.response.getBody(function(err, body) {","              assert.equal(body.toString(), 'Hello Buffered Response!');","              done();","            });","          });","        });","","        env.target.response.write('Hello ');","        env.target.response.write('Buffered ');","        env.target.response.write('Response!');","        env.target.response.end();","      ","        app.call(env);","    });","","    describe('when emitting Buffers', function() {","      it('returns a full representation of the response body', function(done) {","        var env = _getEnv();","        env.target.response = new Response();","        env.response = new Response();","","        var _http = {};","        _http.IncomingMessage = Request;","        _http.ServerResponse = Response;","        _http.Agent = function() {};","","        var app = argo(_http)","          .use(function(handle) {","            handle('response', function(env, next) {","              env.target.response.getBody(function(err, body) {","                assert.equal(body.toString(), 'Hello Buffered Response!');","                done();","              });","            });","          })","","        env.target.response.write(new Buffer('Hello '));","        env.target.response.write(new Buffer('Buffered '));","        env.target.response.write(new Buffer('Response!'));","        env.target.response.end();","","        app.call(env);","      });","    });","    ","    describe('when emitting Strings', function() {","      it('returns a full representation of the response body', function(done) {","        var env = _getEnv();","        env.target.response = new Response();","        env.response = new Response();","","        var _http = {};","        _http.IncomingMessage = Request;","        _http.ServerResponse = Response;","        _http.Agent = function() {};","","        var app = argo(_http)","          .use(function(handle) {","            handle('response', function(env, next) {","              env.target.response.getBody(function(err, body) {","                assert.equal(body.toString(), 'Hello Buffered Response!');","                done();","              });","            });","          });","","        env.target.response.write('Hello ');","        env.target.response.write('Buffered ');","        env.target.response.write('Response!');","        env.target.response.end();","      ","        app.call(env);","      });","    });","  });","","  describe('response ender', function() {","    it('sets a response body when env.response.body is empty', function(done) {","      var env = _getEnv();","      env.target.response = new Response();","      env.response = new Response();","      env.response.setHeader = function() {};","      env.response.getHeader = function(header) {","        if (header.toLowerCase() === 'content-length') {","          return 'Horticulture Fancy'.length.toString();","        }","      };","      env.response.writeHead = function() {};","      env.response.end = function(body) {","        assert.equal(body, 'Horticulture Fancy');","        done();","      };","","      var app = argo();","","      env.target.response.write('Horticulture Fancy');","      env.target.response.end();","    ","      app.call(env);","    });","  });","","  describe('#get', function() {","    it('responds to a GET request', function(done) {","      var env = _getEnv();","      env.request.method = 'GET';","      env.request.url = '/sheep';","","      argo()","        .get('^/sheep$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.method, 'GET');","            done();","          });","        })","        .call(env);","    });","  });","","  describe('#post', function() {","    it('responds to a POST request', function(done) {","      var env = _getEnv();","      env.request.method = 'POST';","      env.request.url = '/sheep';","","      argo()","        .post('^/sheep$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.method, 'POST');","            done();","          });","        })","        .call(env);","    });","  });","","  describe('#put', function() {","    it('responds to a PUT request', function(done) {","      var env = _getEnv();","      env.request.method = 'PUT';","      env.request.url = '/sheep';","","      argo()","        .put('^/sheep$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.method, 'PUT');","            done();","          });","        })","        .call(env);","    });","  });","","  describe('#del', function() {","    it('responds to a DELETE request', function(done) {","      var env = _getEnv();","      env.request.method = 'DELETE';","      env.request.url = '/sheep';","","      argo()","        .del('^/sheep$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.method, 'DELETE');","            done();","          });","        })","        .call(env);","    });","  });","  ","  describe('#head', function() {","    it('responds to a HEAD request', function(done) {","      var env = _getEnv();","      env.request.method = 'HEAD';","      env.request.url = '/sheep';","","      argo()","        .head('^/sheep$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.method, 'HEAD');","            done();","          });","        })","        .call(env);","    });","  });","","  describe('#options', function() {","    it('responds to a OPTIONS request', function(done) {","      var env = _getEnv();","      env.request.method = 'OPTIONS';","      env.request.url = '/sheep';","","      argo()","        .options('^/sheep$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.method, 'OPTIONS');","            done();","          });","        })","        .call(env);","    });","  });","","","  describe('#trace', function() {","    it('responds to a TRACE request', function(done) {","      var env = _getEnv();","      env.request.method = 'TRACE';","      env.request.url = '/sheep';","","      argo()","        .trace('^/sheep$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.method, 'TRACE');","            done();","          });","        })","        .call(env);","    });","  });","","  describe('#run', function() {","    it('works as a request listener', function(done) {","      var proxy = argo()","        .get('^/sheep$', function(handle) {","          handle('request', function(env, next) {","            assert.equal(env.request.token, 'worked');","            done();","          });","        })","        .build()","","      var request = { method: 'GET', url: '/sheep', token: 'worked' };","      var response = {};","","      proxy.run(request, response);","    });","  });","","  describe('method routing', function() {","    it('returns a 405 Method Not Allowed on unsupported methods', function(done) {","      var env = _getEnv();","      env.request.method = 'POST';","      env.request.url = '/sheep';","      env.response.writeHead = function(status, headers) {","        assert.equal(status, 405);","        done();","      };","","      argo()","        .get('^/sheep$', function(handle) { })","        .call(env);","    });","  });","","  describe('request proxying', function() {","    it('passes through if response headers have already been sent', function(done) {","      var env = _getEnv();","      env.request.method = 'GET';","      env.request.url = '/proxy';","      env.response._headerSent = true;","","      var _http = function() {};","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.Agent = function() {};","","      argo(_http)","        .use(function(handle) {","          handle('response', function(env, next) {","            assert.ok(!env.target.response);","            done();","          });","        })","        .target('http://argotest')","        .call(env);","    });","","    it('forwards requests to a target', function(done) {","      var env = _getEnv();","      env.request.method = 'GET';","      env.request.url = '/proxy';","","      var _http = function() {};","      _http.Agent = function() {};","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.request = function(options, callback) {","        assert.equal(options.method, 'GET');","        assert.equal(options.hostname, 'argotest');","        assert.equal(options.headers['Host'], 'argotest');","        assert.equal(options.path, '/proxy');","        assert.equal(options.auth, 'argo:rocks');","","        return {","          write: function(str) {","            assert.equal(str, 'body');","            done();","          },","          end: function() {},","          on: function() {}","        };","      };","","      var app = argo(_http)","        .target('http://argo:rocks@argotest');","","      env.request.write('body');","      env.request.end();","","      app.call(env);","    });","","","    it('targets a proxy only once', function(done) {","      var env = _getEnv();","      env.request.url = '/map';","      env.request.method = 'GET';","","      var count = 0;","","      var _http = function() {};","      _http.Agent = function() {};","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.request = function(options, callback) {","        count++;","        var res = new Response();","        callback(res);","        return {","          write: function() {},","          end: function() {},","          on: function() {}","        };","      };","","      argo(_http)","        .use(function(handle) {","          handle('response', function(env, next) {","            assert.equal(count, 1);","            done();","            next(env);","          });","        })","        .map('/map', function(proxy) {","          proxy","            .target('http://proxy');","        })","        .target('http://argo')","        .call(env);","    });","","    it('copies raw headers to the response', function(done) {","      var env = _getEnv();","","      env.request.method = 'GET';","      env.request.url = '/proxy';","      env.response.setHeader = function(name, value) {","        if (name.toLowerCase() === 'x-stuff') {","          assert(name, 'X-Stuff');","        }","      };","      env.response.body = 'proxied!';","","      var _http = function() {};","      _http.Agent = function() {};","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.request = function(options, callback) {","        var res = new Response();","        res._rawHeaderNames = { 'x-stuff': 'X-Stuff' };","        res.headers = { 'X-Stuff': 'yep' };","        callback(res);","        return { end: done, on: function() {} };","      };","","      argo(_http)","        .target('http://google.com')","        .call(env);","    });","","    it('sets the status code to 503 on target error', function(done) {","      var env = _getEnv();","","      env.request.method = 'GET';","      env.request.url = '/proxy';","      env.response.body = 'proxied!';","","      var _http = function() {};","      _http.Agent = function() {};","      _http.IncomingMessage = Request;","      _http.ServerResponse = Response;","      _http.request = function(options, callback) {","        var req = new EventEmitter();","        var end = function() {","          req.emit('error', new Error('fake error'));","        };","","        return {","          end: end,","          on: req.on.bind(req),","          socket: { destroy: function() {} }","        };","      };","","      argo(_http)","        .use(function(handle) {","          handle('response', function(env, next) {","            assert.equal(env.response.statusCode, 503);","            done();","          });","        })","        .target('http://google.com')","        .call(env);","    });","  });","","  describe('response serving', function() {","    it('serves streams', function(done) {","      var env = _getEnv();","      env.request = new Request();","      env.request.url = '/hello';","      env.request.method = 'GET';","      env.response = new Response();","","      var test = '';","      env.response.write = function(chunk) {","        test += chunk.toString();","      };","","      env.response.end = function() {","        assert.equal('Hello, World!', test);","        done();","      };","","      var stream = new Stream();","      stream.data = true;","","      argo()","        .get('^/hello$', function(handle) {","          handle('request', function(env, next) {","            env.response.statusCode = 200;","            env.response.headers['Content-Type'] = 'text/plain';","            env.response.body = stream;","            next(env);","          });","        })","        .call(env);","","      stream.emit('data', 'Hello, World!');","      stream.emit('end');","    });","","    it('serves stringified JSON objects', function(done) {","      var env = _getEnv();","      env.request = new Request();","      env.request.url = '/hello';","      env.request.method = 'GET';","      env.response = new Response();","","      env.response.end = function(body) {","        assert.equal('application/json; charset=UTF-8', env.response.getHeader('Content-Type'));","        assert.equal('{\"hello\":\"World\"}', body);","        done();","      };","","      argo()","        .get('^/hello$', function(handle) {","          handle('request', function(env, next) {","            env.response.statusCode = 200;","            env.response.body = { hello: 'World' };","            next(env);","          });","        })","        .call(env);","    });","","    it('serves serves an empty response when the Content-Length is 0', function(done) {","      var env = _getEnv();","      env.request = new Request();","      env.request.url = '/hello';","      env.request.method = 'GET';","      env.response = new Response();","","      env.response.end = function(body) {","        assert.ok(!body);","        done();","      };","","      argo()","        .get('^/hello$', function(handle) {","          handle('request', function(env, next) {","            env.response.statusCode = 200;","            env.response.headers['Content-Length'] = 0;","            next(env);","          });","        })","        .call(env);","    });","  });","","  describe('error handling', function() {","    it('captures state on exception', function(done) {","      var env = _getEnv();","      env.request = new Request();","      env.request.url = '/yo';","      env.request.method = 'GET';","      env.response = new Response();","","      var server = argo()","        .use(function(handle) {","          handle('error', function(env, error, next) {","            assert.equal(env.token, 'TADA!');","            done();","          });","        })","        .get('^/yo$', function(handle) {","          handle('request', function(env, next) {","            env.token = 'TADA!';","            throw new Error('KAPOW!');","          });","        });","","      process.nextTick(function() {","        server.call(env);","      });","    });","  });","});"];
