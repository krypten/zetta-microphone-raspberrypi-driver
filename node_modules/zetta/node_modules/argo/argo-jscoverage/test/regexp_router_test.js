/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['test/regexp_router_test.js']) {
  _$jscoverage['test/regexp_router_test.js'] = [];
  _$jscoverage['test/regexp_router_test.js'][1] = 0;
  _$jscoverage['test/regexp_router_test.js'][2] = 0;
  _$jscoverage['test/regexp_router_test.js'][4] = 0;
  _$jscoverage['test/regexp_router_test.js'][5] = 0;
  _$jscoverage['test/regexp_router_test.js'][6] = 0;
  _$jscoverage['test/regexp_router_test.js'][7] = 0;
  _$jscoverage['test/regexp_router_test.js'][8] = 0;
  _$jscoverage['test/regexp_router_test.js'][9] = 0;
  _$jscoverage['test/regexp_router_test.js'][12] = 0;
  _$jscoverage['test/regexp_router_test.js'][13] = 0;
  _$jscoverage['test/regexp_router_test.js'][14] = 0;
  _$jscoverage['test/regexp_router_test.js'][15] = 0;
  _$jscoverage['test/regexp_router_test.js'][16] = 0;
  _$jscoverage['test/regexp_router_test.js'][19] = 0;
  _$jscoverage['test/regexp_router_test.js'][20] = 0;
  _$jscoverage['test/regexp_router_test.js'][21] = 0;
  _$jscoverage['test/regexp_router_test.js'][22] = 0;
  _$jscoverage['test/regexp_router_test.js'][23] = 0;
  _$jscoverage['test/regexp_router_test.js'][26] = 0;
  _$jscoverage['test/regexp_router_test.js'][27] = 0;
  _$jscoverage['test/regexp_router_test.js'][28] = 0;
  _$jscoverage['test/regexp_router_test.js'][29] = 0;
  _$jscoverage['test/regexp_router_test.js'][30] = 0;
  _$jscoverage['test/regexp_router_test.js'][33] = 0;
  _$jscoverage['test/regexp_router_test.js'][34] = 0;
  _$jscoverage['test/regexp_router_test.js'][35] = 0;
  _$jscoverage['test/regexp_router_test.js'][36] = 0;
  _$jscoverage['test/regexp_router_test.js'][37] = 0;
  _$jscoverage['test/regexp_router_test.js'][40] = 0;
  _$jscoverage['test/regexp_router_test.js'][41] = 0;
  _$jscoverage['test/regexp_router_test.js'][42] = 0;
  _$jscoverage['test/regexp_router_test.js'][43] = 0;
  _$jscoverage['test/regexp_router_test.js'][46] = 0;
  _$jscoverage['test/regexp_router_test.js'][47] = 0;
  _$jscoverage['test/regexp_router_test.js'][48] = 0;
  _$jscoverage['test/regexp_router_test.js'][49] = 0;
  _$jscoverage['test/regexp_router_test.js'][52] = 0;
  _$jscoverage['test/regexp_router_test.js'][53] = 0;
  _$jscoverage['test/regexp_router_test.js'][54] = 0;
  _$jscoverage['test/regexp_router_test.js'][55] = 0;
  _$jscoverage['test/regexp_router_test.js'][58] = 0;
  _$jscoverage['test/regexp_router_test.js'][59] = 0;
  _$jscoverage['test/regexp_router_test.js'][60] = 0;
  _$jscoverage['test/regexp_router_test.js'][61] = 0;
  _$jscoverage['test/regexp_router_test.js'][62] = 0;
}
_$jscoverage['test/regexp_router_test.js'][1]++;
var assert = require("assert");
_$jscoverage['test/regexp_router_test.js'][2]++;
var RegExpRouter = require("../regexp_router");
_$jscoverage['test/regexp_router_test.js'][4]++;
describe("RegExpRouter", (function () {
  _$jscoverage['test/regexp_router_test.js'][5]++;
  it("sets params as RegExp result", (function () {
  _$jscoverage['test/regexp_router_test.js'][6]++;
  var router = RegExpRouter.create();
  _$jscoverage['test/regexp_router_test.js'][7]++;
  router.add("^/hello/([^/]+)$", {methods: ["GET"]}, new Function());
  _$jscoverage['test/regexp_router_test.js'][8]++;
  var result = router.find("/hello/world", "GET");
  _$jscoverage['test/regexp_router_test.js'][9]++;
  assert.equal(result.params[1], "world");
}));
  _$jscoverage['test/regexp_router_test.js'][12]++;
  it("returns a NotFound warning when route does not exist", (function () {
  _$jscoverage['test/regexp_router_test.js'][13]++;
  var router = RegExpRouter.create();
  _$jscoverage['test/regexp_router_test.js'][14]++;
  router.add("^/hello$", {methods: ["GET"]}, new Function());
  _$jscoverage['test/regexp_router_test.js'][15]++;
  var result = router.find("/goodbye", "GET");
  _$jscoverage['test/regexp_router_test.js'][16]++;
  assert.equal(result.warning, "NotFound");
}));
  _$jscoverage['test/regexp_router_test.js'][19]++;
  it("returns a MethodNotSupported warning when method does not exist", (function () {
  _$jscoverage['test/regexp_router_test.js'][20]++;
  var router = RegExpRouter.create();
  _$jscoverage['test/regexp_router_test.js'][21]++;
  router.add("^/hello$", {methods: ["PUT"]}, new Function());
  _$jscoverage['test/regexp_router_test.js'][22]++;
  var result = router.find("/hello", "GET");
  _$jscoverage['test/regexp_router_test.js'][23]++;
  assert.equal(result.warning, "MethodNotSupported");
}));
  _$jscoverage['test/regexp_router_test.js'][26]++;
  it("matches all routes when an asterisk is used", (function () {
  _$jscoverage['test/regexp_router_test.js'][27]++;
  var router = RegExpRouter.create();
  _$jscoverage['test/regexp_router_test.js'][28]++;
  router.add("*", {methods: ["GET"]}, new Function());
  _$jscoverage['test/regexp_router_test.js'][29]++;
  var result = router.find("/hello/there/buddy", "GET");
  _$jscoverage['test/regexp_router_test.js'][30]++;
  assert.ok(! result.warning);
}));
  _$jscoverage['test/regexp_router_test.js'][33]++;
  it("matches all methods when an asterisk is used", (function () {
  _$jscoverage['test/regexp_router_test.js'][34]++;
  var router = RegExpRouter.create();
  _$jscoverage['test/regexp_router_test.js'][35]++;
  router.add("^/hello$", {methods: ["*"]}, new Function());
  _$jscoverage['test/regexp_router_test.js'][36]++;
  var result = router.find("/hello", "OPTIONS");
  _$jscoverage['test/regexp_router_test.js'][37]++;
  assert.ok(! result.warning);
}));
  _$jscoverage['test/regexp_router_test.js'][40]++;
  it("can truncate a path with a RegExp prefix", (function () {
  _$jscoverage['test/regexp_router_test.js'][41]++;
  var router = RegExpRouter.create();
  _$jscoverage['test/regexp_router_test.js'][42]++;
  var path = router.truncate("/hello/world", "^/hello");
  _$jscoverage['test/regexp_router_test.js'][43]++;
  assert.equal(path, "/world");
}));
  _$jscoverage['test/regexp_router_test.js'][46]++;
  it("ensures pattern matching starts at the beginning of the path when truncating", (function () {
  _$jscoverage['test/regexp_router_test.js'][47]++;
  var router = RegExpRouter.create();
  _$jscoverage['test/regexp_router_test.js'][48]++;
  var path = router.truncate("/hello/world", "/hello");
  _$jscoverage['test/regexp_router_test.js'][49]++;
  assert.equal(path, "/world");
}));
  _$jscoverage['test/regexp_router_test.js'][52]++;
  it("gracefully returns the path when trying to truncate using an asterisk", (function () {
  _$jscoverage['test/regexp_router_test.js'][53]++;
  var router = RegExpRouter.create();
  _$jscoverage['test/regexp_router_test.js'][54]++;
  var path = router.truncate("/hello/world", "*");
  _$jscoverage['test/regexp_router_test.js'][55]++;
  assert.equal(path, "/hello/world");
}));
  _$jscoverage['test/regexp_router_test.js'][58]++;
  it("removes `$` in regular expression syntax when actsAsPrefix is set", (function () {
  _$jscoverage['test/regexp_router_test.js'][59]++;
  var router = RegExpRouter.create();
  _$jscoverage['test/regexp_router_test.js'][60]++;
  router.add("^/hello$", {actsAsPrefix: true}, new Function());
  _$jscoverage['test/regexp_router_test.js'][61]++;
  var result = router.find("/hello/world", "GET");
  _$jscoverage['test/regexp_router_test.js'][62]++;
  assert.ok(! result.warning);
}));
}));
_$jscoverage['test/regexp_router_test.js'].source = ["var assert = require('assert');","var RegExpRouter = require('../regexp_router');","","describe('RegExpRouter', function() {","  it('sets params as RegExp result', function() {","    var router = RegExpRouter.create();","    router.add('^/hello/([^\\/]+)$', { methods: ['GET'] }, new Function() /* handleFn */);","    var result = router.find('/hello/world', 'GET');","    assert.equal(result.params[1], 'world');","  });","","  it('returns a NotFound warning when route does not exist', function() {","    var router = RegExpRouter.create();","    router.add('^/hello$', { methods: ['GET'] }, new Function() /* handleFn */);","    var result = router.find('/goodbye', 'GET');","    assert.equal(result.warning, 'NotFound');","  });","","  it('returns a MethodNotSupported warning when method does not exist', function() {","    var router = RegExpRouter.create();","    router.add('^/hello$', { methods: ['PUT'] }, new Function() /* handleFn */);","    var result = router.find('/hello', 'GET');","    assert.equal(result.warning, 'MethodNotSupported');","  });","","  it('matches all routes when an asterisk is used', function() {","    var router = RegExpRouter.create();","    router.add('*', { methods: ['GET'] }, new Function() /* handleFn */);","    var result = router.find('/hello/there/buddy', 'GET');","    assert.ok(!result.warning);","  });","","  it('matches all methods when an asterisk is used', function() {","    var router = RegExpRouter.create();","    router.add('^/hello$', { methods: ['*'] }, new Function() /* handleFn */);","    var result = router.find('/hello', 'OPTIONS');","    assert.ok(!result.warning);","  });","","  it('can truncate a path with a RegExp prefix', function() {","    var router = RegExpRouter.create();","    var path = router.truncate('/hello/world', '^/hello');","    assert.equal(path, '/world');","  });","","  it('ensures pattern matching starts at the beginning of the path when truncating', function() {","    var router = RegExpRouter.create();","    var path = router.truncate('/hello/world', '/hello');","    assert.equal(path, '/world');","  });","","  it('gracefully returns the path when trying to truncate using an asterisk', function() {","    var router = RegExpRouter.create();","    var path = router.truncate('/hello/world', '*');","    assert.equal(path, '/hello/world');","  });","","  it('removes `$` in regular expression syntax when actsAsPrefix is set', function() {","    var router = RegExpRouter.create();","    router.add('^/hello$', { actsAsPrefix: true }, new Function() /* handleFn */);","    var result = router.find('/hello/world', 'GET');","    assert.ok(!result.warning);","  });","});"];
