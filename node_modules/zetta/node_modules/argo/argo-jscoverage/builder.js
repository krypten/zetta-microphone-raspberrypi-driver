/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['builder.js']) {
  _$jscoverage['builder.js'] = [];
  _$jscoverage['builder.js'][1] = 0;
  _$jscoverage['builder.js'][3] = 0;
  _$jscoverage['builder.js'][4] = 0;
  _$jscoverage['builder.js'][5] = 0;
  _$jscoverage['builder.js'][6] = 0;
  _$jscoverage['builder.js'][7] = 0;
  _$jscoverage['builder.js'][8] = 0;
  _$jscoverage['builder.js'][9] = 0;
  _$jscoverage['builder.js'][15] = 0;
  _$jscoverage['builder.js'][16] = 0;
  _$jscoverage['builder.js'][19] = 0;
  _$jscoverage['builder.js'][20] = 0;
  _$jscoverage['builder.js'][23] = 0;
  _$jscoverage['builder.js'][24] = 0;
  _$jscoverage['builder.js'][27] = 0;
  _$jscoverage['builder.js'][28] = 0;
  _$jscoverage['builder.js'][29] = 0;
  _$jscoverage['builder.js'][30] = 0;
  _$jscoverage['builder.js'][34] = 0;
  _$jscoverage['builder.js'][35] = 0;
  _$jscoverage['builder.js'][38] = 0;
  _$jscoverage['builder.js'][41] = 0;
  _$jscoverage['builder.js'][42] = 0;
  _$jscoverage['builder.js'][43] = 0;
  _$jscoverage['builder.js'][44] = 0;
  _$jscoverage['builder.js'][47] = 0;
  _$jscoverage['builder.js'][53] = 0;
  _$jscoverage['builder.js'][54] = 0;
  _$jscoverage['builder.js'][57] = 0;
  _$jscoverage['builder.js'][60] = 0;
}
_$jscoverage['builder.js'][1]++;
var pipeworks = require("pipeworks");
_$jscoverage['builder.js'][3]++;
function Builder() {
  _$jscoverage['builder.js'][4]++;
  this._middleware = [];
  _$jscoverage['builder.js'][5]++;
  this._requestPipeline = pipeworks();
  _$jscoverage['builder.js'][6]++;
  this._responsePipeline = pipeworks();
  _$jscoverage['builder.js'][7]++;
  this._routeRequestPipeline = pipeworks();
  _$jscoverage['builder.js'][8]++;
  this._routeResponsePipeline = pipeworks();
  _$jscoverage['builder.js'][9]++;
  this.pipelineMap = {"request": this._requestPipeline, "response": this._responsePipeline, "route:request": this._routeRequestPipeline, "route:response": this._routeResponsePipeline};
  _$jscoverage['builder.js'][15]++;
  this.errorHandler = null;
  _$jscoverage['builder.js'][16]++;
  this.app = null;
}
_$jscoverage['builder.js'][19]++;
Builder.prototype.use = (function (middleware) {
  _$jscoverage['builder.js'][20]++;
  this._middleware.push(middleware);
});
_$jscoverage['builder.js'][23]++;
Builder.prototype.run = (function (app) {
  _$jscoverage['builder.js'][24]++;
  this.app = app;
});
_$jscoverage['builder.js'][27]++;
Builder.prototype.buildHandler = (function eventedBuildHandler(event, options, handler) {
  _$jscoverage['builder.js'][28]++;
  if (event === "error") {
    _$jscoverage['builder.js'][29]++;
    if (typeof options === "function") {
      _$jscoverage['builder.js'][30]++;
      this.errorHandler = options;
    }
  }
  _$jscoverage['builder.js'][34]++;
  if (! (event in this.pipelineMap)) {
    _$jscoverage['builder.js'][35]++;
    this.pipelineMap[event] = pipeworks();
  }
  _$jscoverage['builder.js'][38]++;
  this.pipelineMap[event].fit(options, handler);
});
_$jscoverage['builder.js'][41]++;
Builder.prototype.build = (function () {
  _$jscoverage['builder.js'][42]++;
  var handle = this.buildHandler.bind(this);
  _$jscoverage['builder.js'][43]++;
  this._middleware.forEach((function (middleware) {
  _$jscoverage['builder.js'][44]++;
  middleware(handle);
}));
  _$jscoverage['builder.js'][47]++;
  var pipeline = this._requestPipeline.join(this._routeRequestPipeline).fit(this.app).join(this._routeResponsePipeline.reverse()).join(this._responsePipeline.reverse());
  _$jscoverage['builder.js'][53]++;
  if (this.errorHandler) {
    _$jscoverage['builder.js'][54]++;
    pipeline.fault(this.errorHandler);
  }
  _$jscoverage['builder.js'][57]++;
  return pipeline.build();
});
_$jscoverage['builder.js'][60]++;
module.exports = Builder;
_$jscoverage['builder.js'].source = ["var pipeworks = require('pipeworks');","","function Builder() {","  this._middleware = [];","  this._requestPipeline = pipeworks();","  this._responsePipeline = pipeworks();","  this._routeRequestPipeline = pipeworks();","  this._routeResponsePipeline = pipeworks();","  this.pipelineMap = {","    'request': this._requestPipeline,","    'response': this._responsePipeline,","    'route:request': this._routeRequestPipeline,","    'route:response': this._routeResponsePipeline","  };","  this.errorHandler = null;","  this.app = null;","}","","Builder.prototype.use = function(middleware) {","  this._middleware.push(middleware);","};","","Builder.prototype.run = function(app) {","  this.app = app;","};","","Builder.prototype.buildHandler = function eventedBuildHandler(event, options, handler) {","  if (event === 'error') {","    if (typeof options === 'function') {","      this.errorHandler = options;","    }","  }","","  if (!(event in this.pipelineMap)) {","    this.pipelineMap[event] = pipeworks();","  }","","  this.pipelineMap[event].fit(options, handler);","};","","Builder.prototype.build = function() {","  var handle = this.buildHandler.bind(this);","  this._middleware.forEach(function(middleware) {","    middleware(handle);","  });","","  var pipeline = this._requestPipeline","    .join(this._routeRequestPipeline)","    .fit(this.app)","    .join(this._routeResponsePipeline.reverse())","    .join(this._responsePipeline.reverse());","","  if (this.errorHandler) {","    pipeline.fault(this.errorHandler);","  }","","  return pipeline.build();","};","","module.exports = Builder;"];
